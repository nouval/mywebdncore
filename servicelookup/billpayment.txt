Find all "ServiceChannel.Return<", Subfolders, Find Results 1, Entire Solution, "*.cs"
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillOrderManager.cs(24):			List<BillInfo> searchedList = ServiceChannel.Return<IBillPaymentService, List<BillInfo>>(service => service.SearchOrders(searchOptions.ReceivingAgentIds, searchOptions.TransNo, searchOptions.DateFrom, searchOptions.DateTo, searchOptions.Status, transType, searchOptions.PagingOptions.RowNumber, searchOptions.PagingOptions.PageSize, searchOptions.PhoneNumber, Convert.ToInt32(searchOptions.EnteredByIds), searchOptions.Branch, searchOptions.BillerLocID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillOrderManager.cs(43):			BillCommissionInfo billCommissionList = ServiceChannel.Return<IBillPaymentService, BillCommissionInfo>(service => service.GetAgentCommissionReport(agentId, dateStart, dateEnd, billerLocId, country, countryId, agentLocId, agentLocationList));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(26):			List<BillPaymentInfo> info = ServiceChannel.Return<IBillPaymentService, List<BillPaymentInfo>>(service => service.TransactionTypeList());
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(37):			List<BPPromptInfo> info = ServiceChannel.Return<IBillPaymentService, List<BPPromptInfo>>(service => service.GetBillPaymentPromptDailog(billerLocId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(49):			List<BillStatusInfo> info = ServiceChannel.Return<IBillPaymentService, List<BillStatusInfo>>(service => service.StatusTypeList(fkey1));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(63):			string result = ServiceChannel.Return<IBillPaymentService, string>(service => service.VoidBillPaymentTransaction(tranid, userid, entryType, tellerDrawerInstanceID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(74):			return ServiceChannel.Return<IBillPaymentService, List<BeneficiaryEnrollCardInfo>>(service => service.GetBeneficiaryDetails(customerId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(84):			return ServiceChannel.Return<IBillPaymentService, List<BillBeneficiaryInfo>>(service => service.GetBillerDetails(customerId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(94):			return ServiceChannel.Return<IBillPaymentService, BeneficiaryEnrollCardInfo>(service => service.GetBeneficiaryTerminalDetails(beneficiaryId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(116):			return ServiceChannel.Return<IBillPaymentService, BillerLocationInfo>(service => service.GetBillerTerminalDetails(customerAccountId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(127):			int resultVal = ServiceChannel.Return<IBillPaymentService, int>(service => service.UpdateBillerTerminalDetails(info, customerId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(140):			List<WirelessTopUpInfo> topUpInfo = ServiceChannel.Return<IBillPaymentService, List<WirelessTopUpInfo>>(service => service.WirelessCountryList(DateTime.Now, agent.RecAgent.AgentID,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(155):			List<TopUpFilteredCountryListInfo> topUpFilteredInfo = ServiceChannel.Return<IBillPaymentService, List<TopUpFilteredCountryListInfo>>(service => service.TopUpFilteredCountryList(DateTime.Now, agent.RecAgent.AgentID,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(163):			List<TransInfo> info = ServiceChannel.Return<IBillPaymentService, List<TransInfo>>(service => service.CustomersTransLookUp(customerId, customerNo, productType));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(175):			List<TopUpBillernameListInfo> topUpBillerNameInfo = ServiceChannel.Return<IBillPaymentService, List<TopUpBillernameListInfo>>(service => service.GetTopUpBillerList(billerSearchInfo, DateTime.Now, agent.RecAgent.AgentID, agent.Location.LocationId, 0, 0,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(189):			List<TopUpBillernameListInfo> topUpBillerNameInfo = ServiceChannel.Return<IBillPaymentService, List<TopUpBillernameListInfo>>(service => service.GetTopUpBillerList(billerSearchInfo, DateTime.Now, agent.RecAgent.AgentID, agent.Location.LocationId, 0, 0,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(203):			string result = ServiceChannel.Return<IBillPaymentService, string>(service => service.GetCoumputerID(macaddress, agentid));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(215):			int result = ServiceChannel.Return<IBillPaymentService, int>(service => service.GetReceiptType(computerid, setting));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(229):			bool result = ServiceChannel.Return<IBillPaymentService, bool>(service => service.SaveReceiptType(computerid, settingid, setting, this.profile.User.UserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(242):			bool result = ServiceChannel.Return<IBillPaymentService, bool>(service => service.VerifyServicesOffered(serviceId, productId, 0, 0, agent.DefaultAddress.Country, agent.DefaultAddress.State, AgentCityID, "", "", agent.LoginSettings.BaseCurrency, "", 1, DateTime.Now, 0, 0, agent.RecAgent.AgentID, 0, 0, 0));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(254):			string result = ServiceChannel.Return<IBillPaymentService, string>(service => service.GetConfirmationNumber(tranid));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(266):			CancelTransactionResponse canceltransresponse = ServiceChannel.Return<IBillPaymentService, CancelTransactionResponse>(service => service.CancelTransaction(1, 520, tranid, this.profile.User.UserId.ToString()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(276):			List<BpCountryList> countrylist = ServiceChannel.Return<IBillPaymentService, List<BpCountryList>>(service => service.GetCountryBillerListBP(languageId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillPaymentManager.cs(312):			int result = ServiceChannel.Return<IBillPaymentService, int>(service => service.GetAgentCityID(agentCountry, agentPostalCode));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillReceiptManager.cs(25):                using (Stream stream = ServiceChannel.Return<IBillPaymentService, Stream>(service => service.GetBillReceipt(transId, locale, originalReceipt, isTopUp, pin, userId, RefNum)))
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillReceiptManager.cs(36):                using (Stream stream = ServiceChannel.Return<IBillPaymentService, Stream>(service => service.GetBPReceivingAgentManualReceipt()))
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillReceiptManager.cs(47):                BPThermalReceiptInfo bpReceiptInfo = ServiceChannel.Return<IBillPaymentService, BPThermalReceiptInfo>(service => service.GetBPThermalReceiptInfo(transId, locale, originalReceipt));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillReceiptManager.cs(62):                BPThermalReceiptInfo topupReceiptInfo = ServiceChannel.Return<IBillPaymentService, BPThermalReceiptInfo>(service => service.GetTPThermalReceiptInfo(transId, pin, locale, originalReceipt, userId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillReceiptManager.cs(87):                OnlineBillInfo receiptInfo = ServiceChannel.Return<IBillPaymentService, OnlineBillInfo>(service => service.GetSpainTopUpReceipt(transId, locale, originalReceipt, refNum));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\BillReceiptManager.cs(106):            return ServiceChannel.Return<IBillPaymentService, string>(service => service.GetPSReceiptVlaue(transId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\CustomerManager.cs(22):            List<CustomerInfo> customerInfo = ServiceChannel.Return<IBillPaymentService, List<CustomerInfo>>(service => service.GetCustomers(info, rowNumber, pageSize));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\CustomerManager.cs(34):            int lCustomerNo = ServiceChannel.Return<IBillPaymentService, int>(service => service.CheckCustomerNo(lTempNo, sCustomerNo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\Receipts\ThermalReceiptManager.cs(20):			List<ReceiptLabelsInfo> labelInfo = ServiceChannel.Return<IReportingService, List<ReceiptLabelsInfo>>(service => service.GetReceiptLabels(serviceId, productId, productItemId, languageId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\Receipts\ThermalReceiptManager.cs(57):			return ServiceChannel.Return<IReportingService, ReceiptTemplateInfo>(service => service.GetTemplateInfo(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\Receipts\ThermalReceiptManager.cs(62):			return ServiceChannel.Return<IReportingService, List<DisclaimerInfo>>(service => service.GetThermalReceiptDisclaimer(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\Receipts\ThermalReceiptManager.cs(67):			return ServiceChannel.Return<IReportingService, CompanyInfo>(service => service.GetThermalReceiptCompanyInfo(companyId, companyCountry));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\BP\Receipts\ThermalReceiptManager.cs(72):			return ServiceChannel.Return<IReportingService, int>(service => service.GetReceiptLanguageID(language1, language2));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\Cache\LongTermCacheStorage.cs(46):            return ServiceChannel.Return<IBillPaymentService, List<CarrierBiller>>(service => service.GetBillerCarrierLookUp(billerName, transtype, AgentCountry, AgentState, AgentID, AgentLocID, AgentCurrency));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\Cache\LongTermCacheStorage.cs(71):			return this.lookup.GetItem("GetCountryCarrierInfo", () => ServiceChannel.Return<IBillPaymentService, List<WirelessTopUpInfo>>(service => service.CountryBillerList()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\Cache\LongTermCacheStorage.cs(79):				return ServiceChannel.Return<IBillPaymentService, List<BillerLocationInfo>>(service => service.GetBillerLookUpList(billerName, country, baseCurrency, agentCountry, agentId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\Compliance\SAR\SARValidationManager.cs(124):			SarValidationResponse sar = ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate(sarValidationRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\Compliance\SAR\SARValidationManager.cs(154):			return ServiceChannel.Return<IPricingService, RateInfo>(service => service.GetRateInfo(rateInfoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\Customers\CustomerIDImageManager.cs(41):			imageId = ServiceChannel.Return<IImageService, int>(service => service.CreateCustomerIdentificationImage(identificationImageInfo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\Customers\CustomerIDImageManager.cs(58):			return ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(id));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\Customers\CustomerIDImageManager.cs(82):			return ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(imageId, includeImage));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\Customers\CustomerIDImageManager.cs(87):		//    return ServiceChannel.Return<IImageService, List<CustomerIDImageInfo>>(service => service.GetImageByImageID(imageId, includeImage).ToList();
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\Customers\CustomerIDManager.cs(55):			List<ImageInfo> image = ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(customerIdentification.ImageID, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\Model\OrderCreate\IdentificationManager.cs(113):			List<ImageInfo> images = ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(customerIdentification.ImageID, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\MoneyTransfer\Receiving\CustomerReceiptManager.cs(11):			return ServiceChannel.Return<IReportingService, OrderRequireWatermarkInfo>(service => service.MTOrderRequiresReprintWatermark(orderId, isNewOrder));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\MoneyTransfer\Receiving\IdentificationCheckManager.cs(45):			var info = ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(imageId, includeImages));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\MoneyTransfer\Receiving\PossibleDuplicateActionManager.cs(14):			ComplianceInfo info = ServiceChannel.Return<ISarService, ComplianceInfo>(service => service.GetComplianceMatchById(id));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\MoneyTransfer\Receiving\RiaLink\BillerTabManager.cs(30):            var billerInfo2 = ServiceChannel.Return<IBillPaymentService, BillBeneficiaryInfo>(service => service.InsertBiller(billerInfo, modifiedUserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\MoneyTransfer\Receiving\RiaLink\BillerTabManager.cs(112):            var infos = ServiceChannel.Return<IBillPaymentService, List<BillBeneficiaryInfo>>(service => service.GetBillerDetails(customerId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\MoneyTransfer\Receiving\RiaLink\BillerTabManager.cs(118):            var billerInfo = ServiceChannel.Return<IBillPaymentService, BillBeneficiaryInfo>(service => service.GetBiller(customerAccountId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\MoneyTransfer\Receiving\RiaLink\CustomerCardsTabManager.cs(17):			List<TermCardInfo> termCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(new List<int> { customerId }));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\MoneyTransfer\Receiving\RiaLink\CustomerCardsTabManager.cs(23):			return ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardId(cardId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\MoneyTransfer\Receiving\RiaLink\CustomerCardsTabManager.cs(28):			return ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(cardNumber));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment.Bll\MoneyTransfer\Receiving\RiaLink\CustomerDetailTabManager.cs(35):			return ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(new List<int> { customerId }));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\HttpHandlers\CustomerIDImageHandler.ashx.cs(29):			ImageInfo image = ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(imageId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Pages\BillPayment\SearchBillerCustomerLookup.aspx.cs(431):					riaLinkCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIDs));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Pages\BillPayment\SearchBillerCustomerLookup.aspx.cs(507):			return ServiceChannel.Return<IBillPaymentService, int>(service => service.GetLastServiceTypeID(billerLocId, customerAccountId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Pages\BillPayment\SearchBillerCustomerLookup.aspx.cs(549):			var chargeInfo = ServiceChannel.Return<IBillPaymentService, CommissionChargeInfo>(service => service.GetCommissionCharges(info, billerAmount, offerVar));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Pages\BillPayment\SearchBillerCustomerLookup.aspx.cs(623):			var oSearchBillerLookupinformation = ServiceChannel.Return<IBillPaymentService, SearchBillerLookupinformation>(service =>
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(62):			var retVal = ServiceChannel.Return<IBillPaymentService, int>(service => service.GetZeroAmountBillerExist(billerLocID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(74):			var info = ServiceChannel.Return<IBillPaymentService, List<BillerLocationInfo>>(service => service.GetServiceTypeList(billerLocID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(86):			var Countrylist = ServiceChannel.Return<IBillPaymentService, List<BpCountryList>>(service => service.GetCountryBillerListBP(ConfigurationFiles.CultureLookup.GetCultureFromLocale(this.Profile.User.Culture.Language).LanguageId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(188):			var chargeInfo = ServiceChannel.Return<IBillPaymentService, CommissionChargeInfo>(service => service.GetCommissionCharges(info, paymentInfo.BillerAmount, offerVar));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(270):			var rateCom = ServiceChannel.Return<IBillPaymentService, RateCommissionInfo>(service => service.GetBPRateCommission(rateInfo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(294):			var str = ServiceChannel.Return<IBillPaymentService, List<string>>(service => service.GetBillPaymentAccountMaskList(billerLocID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(308):			var str = ServiceChannel.Return<IBillPaymentService, string[]>(service => service.CheckBPAccountMask(billerlocID, accNo).Split('|'));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(322):			var result = ServiceChannel.Return<IBillPaymentService, bool>(service => service.GetBillerLocationStatus(billerID, billerlocID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(357):			result = ServiceChannel.Return<IBillPaymentService, bool>(service => service.CheckServiceOffered(info));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(371):			var result = ServiceChannel.Return<IBillPaymentService, bool>(service => service.CheckCustomerValid(custID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(385):			var processorId = ServiceChannel.Return<IBillPaymentService, int>(service => service.GetBPPaymentProcessorID(billerlocID, serviceTypeID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(399):			var str = ServiceChannel.Return<IBillPaymentService, string[]>(service => service.GetBPProcessorPrompts(billerlocID, processorID).Split('|'));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(412):			var str = ServiceChannel.Return<IBillPaymentService, string[]>(service => service.GetDistinctPromptList(billerlocID).Split('|'));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(426):			var value = ServiceChannel.Return<IBillPaymentService, int>(service => service.GetBPPromptValue_ExistforCustomer(custAccountID, paymentprocessorID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(439):			var value = ServiceChannel.Return<IBillPaymentService, string>(service => service.GetBillPayment_AllProcessorData(promptID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(452):			var id = ServiceChannel.Return<IBillPaymentService, int>(service => service.GetBP_InternalIDUsingPromptValue(promptID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(468):			var processorData = ServiceChannel.Return<IBillPaymentService, string>(service => service.GetBP_ProcessorData(extNo, processorId, promptValId, serviceId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(506):			var result = ServiceChannel.Return<IBillPaymentService, string>(service => service.SaveCustomerAccountInfo(info, promptVal));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(526):			var stateInfo = ServiceChannel.Return<IBillPaymentService, List<BPStatesInfo>>(service => service.GetStatesList(countryAbbrev));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(537):			var topUpInfo = ServiceChannel.Return<IBillPaymentService, List<WirelessTopUpInfo>>(service => service.WirelessCountryList(DateTime.Now, this.Agent.AgentId,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(562):			var topUpFilteredInfo = ServiceChannel.Return<IBillPaymentService, List<TopUpFilteredCountryListInfo>>(service => service.TopUpFilteredCountryList(DateTime.Now, this.Agent.AgentId,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(654):			var rangeInfo = ServiceChannel.Return<IBillPaymentService, WirelessTopUpAmountRangeInfo>(service => service.GetValidTopUpAmountRange(info));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(685):			var rateInfo = ServiceChannel.Return<IBillPaymentService, WirelessTopUpRateInfo>(service => service.GetTransRate(info, this.Agent.AgentId, this.Agent.LoginSettings.BaseCurrency, this.Agent.Location.Country));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(718):			var amtInfo = ServiceChannel.Return<IBillPaymentService, WireTopUpAmountsInfo>(service => service.GetTopUpAmount(info, this.Agent.RecAgent.CompanyID,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(764):			var paymentId = ServiceChannel.Return<IBillPaymentService, int>(service => service.GetLastServiceTypeID(billerLocID, customerAccountID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(781):			var cancellationMsg = ServiceChannel.Return<IBillPaymentService, string>(service => service.SetCancellationMessage(this.Profile.User.Culture.Language, this.Agent.Location.Country, BillerID, CarrierLocationID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(805):			var rechargeInfo = ServiceChannel.Return<IBillPaymentService, WirelessRechargeInfo>(service => service.ValidateRechargeNumber(wirelessInfo, Convert.ToInt32(serviceId), Convert.ToInt32(serviceKey)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(828):			var validateBillerResponse = ServiceChannel.Return<IBillPaymentService, ValidateBillerResponse>(service => service.ValidateBillerAccount(info, Convert.ToInt32(serviceId), Convert.ToInt32(serviceKey)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(926):			var info = ServiceChannel.Return<IBillPaymentService, WirelessTopUpInfo>(service => service.SaveWirelessTransaction(transInfo, appVersion, appName, Convert.ToInt32(BillPaymentConfig.Instance.EpayRequestTimeOut), model.ArrayPosition, model.FieldNames));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(1032):			var result = ServiceChannel.Return<IBillPaymentService, string>(service => service.BillPaymentCutOffMessages(BillerLocID, PmtProcessorID, ServiceTypeID, IsReceipt));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(1137):			string result = ServiceChannel.Return<IBillPaymentService, string>(service => service.SaveBillPaymentTransactions(info, promptVal, instanceID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(1226):			var result = ServiceChannel.Return<IBillPaymentService, string>(service => service.SaveWalkInBillPaymentTransactions(info, promptVal, instanceID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(1282):			var result = ServiceChannel.Return<IBillPaymentService, bool>(service => service.VerifyServicesOffered(ServiceId, ProductId, 0, EntryMethod, this.Agent.DefaultAddress.Country, this.Agent.DefaultAddress.State, agentCityId, "", "", this.Agent.LoginSettings.BaseCurrency, CurrencyTo, 0, DateTime.Now, TransactionAmt, Transactionto, this.Agent.AgentId, this.Agent.LocationId, Billerid, Billerlocid));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(1702):			var bpresponse = ServiceChannel.Return<IBillPaymentService, BPValidateResponse>(service =>
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(1723):			var result = ServiceChannel.Return<IBillPaymentService, string>(service => service.BillPaymentCutOffTimeMessage(billerLocId, pmtProcessorID, serviceTypeId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(1744):			var carrierlist = ServiceChannel.Return<IBillPaymentService, List<WirelessTopUpInfo>>(service =>
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(1924):			var customerInfo = ServiceChannel.Return<IBillPaymentService, List<CustomerInfo>>(service => service.GetCustomers(customersinfo, rowNumber, pageSize));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(1963):			var info = ServiceChannel.Return<IBillPaymentService, List<BPPaymentMethod>>(service => service.GetPaymentMethod(this.Agent.RecAgent.AgentID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(1970):			var response = ServiceChannel.Return<IBillPaymentService, int>(service => service.SaveTopUpRealtimeLogTransactions(BillAmount, TransRate,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(1983):			var info = ServiceChannel.Return<IBillPaymentService, BillPaymentTransactionInfo>(service => service.GetOTHTransByActivationCode(Activationcode));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\BillPayments.asmx.cs(2007):			var canceltransresponse = ServiceChannel.Return<IBillPaymentService, CancelTransactionResponse>(service => service.CancelTransaction(1, 520, TransNo, this.User.UserId.ToString()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\BillPayment\Billpayment\Services\ScriptMethods.asmx.cs(503):			return ServiceChannel.Return<CES.SL.BillPayment.Contract.IBillPaymentService, List<CES.SL.BillPayment.Contract.BillerLocationInfo>>(service =>
  Matching lines: 105    Matching files: 20    Total files searched: 745
