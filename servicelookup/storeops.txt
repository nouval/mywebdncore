Find all "ServiceChannel.Return<", Subfolders, Find Results 1, Entire Solution, "*.cs"
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps\HttpHandlers\CustomerIDImageHandler.ashx.cs(29):			ImageInfo image = ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(imageId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps\HttpHandlers\IDImageHandler.ashx.cs(28):			ImageInfo image = ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(imageId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps\Services\ScriptMethods.asmx.cs(500):        //        var info = ServiceChannel.Return<IPricingService, RateAndFeeInfo>(service => service.GetRatesAndFees(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps\Services\ScriptMethods.asmx.cs(542):        //    FeeInfo info = ServiceChannel.Return<IPricingService, FeeInfo>(service => service.Get(feeInfoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps\Services\ScriptMethods.asmx.cs(612):        //    FeeInfo info = ServiceChannel.Return<IPricingService, FeeInfo>(service => service.Get(feeInfoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps\Services\ScriptMethods.asmx.cs(681):        //    var info = ServiceChannel.Return<IPricingService, FeeInfo>(service => service.GetLowestByCountry(feeInfoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps\Services\ScriptMethods.asmx.cs(776):        //        ARBalanceCheckInfo info = ServiceChannel.Return<IAccountingService, ARBalanceCheckInfo>(service => service.CheckARBalance(this.Agent.Contact.NameID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps\Services\ScriptMethods.asmx.cs(839):            return ServiceChannel.Return<CES.SL.BillPayment.Contract.IBillPaymentService, List<CES.SL.BillPayment.Contract.BillerLocationInfo>>(service =>
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillOrderManager.cs(122):            List<BillInfo> searchedList = ServiceChannel.Return<IBillPaymentService, List<BillInfo>>(service => service.SearchOrders(searchOptions.ReceivingAgentIds, searchOptions.TransNo, searchOptions.DateFrom, searchOptions.DateTo, searchOptions.Status, TransType, searchOptions.PagingOptions.RowNumber, searchOptions.PagingOptions.PageSize, searchOptions.PhoneNumber, Convert.ToInt32(searchOptions.EnteredByIds), searchOptions.Branch, searchOptions.BillerLocID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillOrderManager.cs(304):            BillCommissionInfo billCommissionList = ServiceChannel.Return<IBillPaymentService, BillCommissionInfo>(service => service.GetAgentCommissionReport(agentID, dateStart, dateEnd, BillerLocID, Country, CountryID, AgentLocID, AgentLocationList));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(24):			List<BillPaymentInfo> info = ServiceChannel.Return<IBillPaymentService, List<BillPaymentInfo>>(service => service.TransactionTypeList());
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(35):			List<BPPromptInfo> info = ServiceChannel.Return<IBillPaymentService, List<BPPromptInfo>>(service => service.GetBillPaymentPromptDailog(billerLocId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(47):			List<BillStatusInfo> info = ServiceChannel.Return<IBillPaymentService, List<BillStatusInfo>>(service => service.StatusTypeList(fkey1));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(60):			string result = ServiceChannel.Return<IBillPaymentService, string>(service => service.VoidBillPaymentTransaction(tranid, userid, entryType, tellerDrawerInstanceID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(71):			return ServiceChannel.Return<IBillPaymentService, List<BeneficiaryEnrollCardInfo>>(service => service.GetBeneficiaryDetails(customerId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(81):			return ServiceChannel.Return<IBillPaymentService, List<BillBeneficiaryInfo>>(service => service.GetBillerDetails(customerId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(91):			return ServiceChannel.Return<IBillPaymentService, BeneficiaryEnrollCardInfo>(service => service.GetBeneficiaryTerminalDetails(beneficiaryId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(113):			return ServiceChannel.Return<IBillPaymentService, BillerLocationInfo>(service => service.GetBillerTerminalDetails(customerAccountId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(124):			int resultVal = ServiceChannel.Return<IBillPaymentService, int>(service => service.UpdateBillerTerminalDetails(info, customerId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(137):			List<WirelessTopUpInfo> TopUpInfo = ServiceChannel.Return<IBillPaymentService, List<WirelessTopUpInfo>>(service => service.WirelessCountryList(DateTime.Now, agent.RecAgent.AgentID,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(151):			List<TopUpFilteredCountryListInfo> TopUpFilteredInfo = ServiceChannel.Return<IBillPaymentService, List<TopUpFilteredCountryListInfo>>(service => service.TopUpFilteredCountryList(DateTime.Now, agent.RecAgent.AgentID,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(159):			List<TransInfo> info = ServiceChannel.Return<IBillPaymentService, List<TransInfo>>(service => service.CustomersTransLookUp(customerID, CustomerNo, productType));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(171):			List<TopUpBillernameListInfo> TopUpBillerNameInfo = ServiceChannel.Return<IBillPaymentService, List<TopUpBillernameListInfo>>(service => service.GetTopUpBillerList(billerSearchInfo, DateTime.Now, agent.RecAgent.AgentID, agent.Location.LocationId, 0, 0,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(186):			List<TopUpBillernameListInfo> TopUpBillerNameInfo = ServiceChannel.Return<IBillPaymentService, List<TopUpBillernameListInfo>>(service => service.GetTopUpBillerList(billerSearchInfo, DateTime.Now, agent.RecAgent.AgentID, agent.Location.LocationId, 0, 0,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(200):			string result = ServiceChannel.Return<IBillPaymentService, string>(service => service.GetCoumputerID(macaddress, agentid));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(212):			int result = ServiceChannel.Return<IBillPaymentService, int>(service => service.GetReceiptType(computerid, setting));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(226):			bool result = ServiceChannel.Return<IBillPaymentService, bool>(service => service.SaveReceiptType(computerid, settingid, setting, this.profile.User.UserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(239):			bool result = ServiceChannel.Return<IBillPaymentService, bool>(service => service.VerifyServicesOffered(serviceId, productId, 0, 0, agent.DefaultAddress.Country, agent.DefaultAddress.State, AgentCityID, "", "", agent.LoginSettings.BaseCurrency, "", 1, DateTime.Now, 0, 0, agent.RecAgent.AgentID, 0, 0, 0));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(251):			string result = ServiceChannel.Return<IBillPaymentService, string>(service => service.GetConfirmationNumber(tranid));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(263):			CancelTransactionResponse canceltransresponse = ServiceChannel.Return<IBillPaymentService, CancelTransactionResponse>(service => service.CancelTransaction(1, 520, tranid, this.profile.User.UserId.ToString()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(273):			List<BpCountryList> Countrylist = ServiceChannel.Return<IBillPaymentService, List<BpCountryList>>(service => service.GetCountryBillerListBP(languageId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillPaymentManager.cs(310):			int result = ServiceChannel.Return<IBillPaymentService, int>(service => service.GetAgentCityID(AgentCountry, AgentPostalCode));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillReceiptManager.cs(23):                using (Stream stream = ServiceChannel.Return<IBillPaymentService, Stream>(service => service.GetBillReceipt(transId, locale, originalReceipt, isTopUp, pin, userId, RefNum)))
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillReceiptManager.cs(30):                using (Stream stream = ServiceChannel.Return<IBillPaymentService, Stream>(service => service.GetBPReceivingAgentManualReceipt()))
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillReceiptManager.cs(41):                BPThermalReceiptInfo bpReceiptInfo = ServiceChannel.Return<IBillPaymentService, BPThermalReceiptInfo>(service => service.GetBPThermalReceiptInfo(transId, locale, originalReceipt));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillReceiptManager.cs(54):                BPThermalReceiptInfo topupReceiptInfo = ServiceChannel.Return<IBillPaymentService, BPThermalReceiptInfo>(service => service.GetTPThermalReceiptInfo(transId, pin, locale, originalReceipt, userId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillReceiptManager.cs(72):            OnlineBillInfo receiptInfo = ServiceChannel.Return<IBillPaymentService, OnlineBillInfo>(service => service.GetSpainTopUpReceipt(transId, locale, originalReceipt, RefNum));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\BillReceiptManager.cs(82):            return ServiceChannel.Return<IBillPaymentService, string>(service => service.GetPSReceiptVlaue(transId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\CustomerManager.cs(22):            List<CustomerInfo> customerInfo = ServiceChannel.Return<IBillPaymentService, List<CustomerInfo>>(service => service.GetCustomers(info, rowNumber, pageSize));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\BillPayment\CustomerManager.cs(34):            int lCustomerNo = ServiceChannel.Return<IBillPaymentService, int>(service => service.CheckCustomerNo(lTempNo, sCustomerNo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Cache\CacheStorage.cs(431):            var cacheItem = this.lookup.GetItem<List<AgentProgramInfo>>(cacheKey, () => ServiceChannel.Return<IPricingService, List<AgentProgramInfo>>(service => service.GetAllProgramsForAgent(agentId)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Cache\CacheStorage.cs(439):            var cacheItem = this.lookup.GetItem<List<AgentProgramInfo>>(cacheKey, () => ServiceChannel.Return<IPricingService, List<AgentProgramInfo>>(service => service.GetAllProgramsByAgentCurrency(agentId, currency)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Cache\LongTermCacheStorage.cs(167):			var cacheItem = this.lookup.GetItem<List<string>>("GetAllPayoutCurrenciesByCountry" + country, () => ServiceChannel.Return<IPricingService, List<string>>(service => service.GetPayoutCurrencyListByCountry(country)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Cache\LongTermCacheStorage.cs(307):			var cacheItem = this.lookup.GetItem<List<WirelessTopUpInfo>>("GetCountryCarrierInfo", () => ServiceChannel.Return<IBillPaymentService, List<WirelessTopUpInfo>>(service => service.CountryBillerList()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Cache\LongTermCacheStorage.cs(321):				return ServiceChannel.Return<IBillPaymentService, List<BillerLocationInfo>>(service => service.GetBillerLookUpList(billerName, country, baseCurrency, agentCountry, agentid));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Cache\LongTermCacheStorage.cs(351):				return Info = ServiceChannel.Return<CES.SL.BillPayment.Contract.IBillPaymentService, List<CES.SL.BillPayment.Contract.CarrierBiller>>(service => service.GetBillerCarrierLookUp(billerName, transtype, AgentCountry, AgentState, AgentID, AgentLocID, AgentCurrency));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(20):			var complianceLogEntryInfoList = ServiceChannel.Return<ISarService, List<ComplianceLogEntryInfo>>(service => service.GetComplianceLogEntriesByOrderId(orderID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(21):			var sarFilterInfoList = ServiceChannel.Return<ISarService, List<SARFilterInfo>>(service => service.GetSARFilters(complianceLogEntryInfoList.ConvertAll(c => c.IssueID)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(68):			var complianceLogEntryInfoList = ServiceChannel.Return<ISarService, List<ComplianceLogEntryInfo>>(service => service.GetComplianceLogEntries(typesCSV, SARCriteriaCSV, fromDate, toDate));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(80):				sarFilterInfoList = ServiceChannel.Return<ISarService, List<SARFilterInfo>>(service => service.GetSARFilters(issueIdList.Distinct().ToList()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(134):			var orderIdList = ServiceChannel.Return<IOfacService, List<int>>(service => service.GetOFACLogOrderIdsByDate(fromDate, toDate));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(151):			List<OFACLogInfo> logEntries = ServiceChannel.Return<IOfacService, List<OFACLogInfo>>(service => service.GetOFACLogEntriesByOrderIds(matchedOrderIds.ToCsv()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(159):			List<RejectedOrderInfo> rejectedOrderList = ServiceChannel.Return<ISarService, List<RejectedOrderInfo>>(service => service.GetSARRejectedOrdersByDateAndRecAgents(recAgents.ConvertAll(r => r.NameID), fromDate, toDate));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(161):			List<SARFilterInfo> filterInfo = ServiceChannel.Return<ISarService, List<SARFilterInfo>>(service => service.GetSARFilters(issueIds));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(169):			var rejectedOrderList = ServiceChannel.Return<ISarService, List<RejectedOrderInfo>>(service => service.GetOFACRejectedOrdersByDateAndRecAgents(recAgentIDs, fromDate, toDate));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(171):			var filterInfo = ServiceChannel.Return<ISarService, List<SARFilterInfo>>(service => service.GetSARFilters(issueIds.ToList()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(365):			return ServiceChannel.Return<ISarService, int>(service => service.AddComplianceIssue(orderID, userNameID, message, note, onHoldReason, onHold, serviceTypeID, issueTypeID, issueItemID, 0));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(370):			return ServiceChannel.Return<ISarService, int>(service => service.CheckIssueStatus(orderID, issueTypeID, issueItemID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(18):			var ofacListList = ServiceChannel.Return<IOfacService, List<OFACListInfo>>(service => service.GetAllBlackLists(agentId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(29):			var ofacListHistoryInfoList = ServiceChannel.Return<IOfacService, List<OFACListHistoryInfo>>(service => service.GetListHistory(listId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(41):			var ofacAliasInfoList = ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>(service => service.GetAllAliases(blackListInfo.ListID, entryID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(52):			var ofacEntry = ServiceChannel.Return<IOfacService, OFACEntryInfo>(service => service.GetEntryInfo(blackListInfo.ListID, entryID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(63):			var ofacEntry = ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetAllNamesByCsv(blackListInfo.ListID, entryId.ToString()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(74):			var ofacList = ServiceChannel.Return<IOfacService, OFACListInfo>(service => service.GetBlackList(listId, agentId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(87):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetNameList(blackListInfo.ListID, filter));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(93):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetAllNamesByCsv(blackListInfo.ListID, OfACNameIDs.ToCsv()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(99):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>(service => service.GetAllAliasesByCSV(blackListInfo.ListID, OfACNameIDs.ToCsv()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(126):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACNameCombinedInfo>>(service => service.GetNameCombinedList(blackListInfo.ListID, filter));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(139):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>(service => service.GetAliasList(blackListInfo.ListID, filter));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(155):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACAddressInfo>>(service => service.GetAddressList(blackListInfo.ListID, filter));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACBlackListManager.cs(164):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetAllNamesByCsv(listId, ent_nums.ToCsv()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\OFAC\OFACValidationManager.cs(26):			var response = ServiceChannel.Return<IOfacService, ValidationResponse>(service => service.Match2(ofacUser));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\SAR\SARFieldManager.cs(15):			var infos = ServiceChannel.Return<ISarService, List<SARFieldInfo>>(service => service.GetAllFieldsByFilterID(filterId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\SAR\SARFilterManager.cs(18):			SARFilterInfo filter = ServiceChannel.Return<ISarService, SARFilterInfo>(service => service.GetSARFilter(filterId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\SAR\SARFilterManager.cs(34):			Dictionary<int, DepartmentInfo> department = ServiceChannel.Return<IAccountingService, Dictionary<int, DepartmentInfo>>(service => service.GetAllDepartments(locationIDs));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\SAR\SARFilterManager.cs(46):			List<SARFilterInfo> filterList = ServiceChannel.Return<ISarService, List<SARFilterInfo>>(service => service.GetSARFilterListByCountry(countryFrom, countryTo, agentIdList, showDisabled));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\SAR\SARFilterManager.cs(63):			Dictionary<int, DepartmentInfo> department = ServiceChannel.Return<IAccountingService, Dictionary<int, DepartmentInfo>>(service => service.GetAllDepartments(locationIDs));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\SAR\SARValidationManager.cs(141):			SarValidationResponse sar = ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate(sarValidationRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\SAR\SARValidationManager.cs(152):			SarValidationResponse sar = ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate_CEX(506, 0,sarValidationRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Compliance\SAR\SARValidationManager.cs(178):			return ServiceChannel.Return<IPricingService, RateInfo>(service => service.GetRateInfo(rateInfoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Customers\CustomerIDImageManager.cs(41):			imageIDInfo = ServiceChannel.Return<IImageService, ImageIDInfo>(service => service.CreateCustomerIdentificationImageV2(identificationImageInfo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Customers\CustomerIDImageManager.cs(60):			return ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(id));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Customers\CustomerIDImageManager.cs(84):			return ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(imageId, includeImage));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Customers\CustomerIDImageManager.cs(89):		//    return ServiceChannel.Return<IImageService, List<CustomerIDImageInfo>>(service => service.GetImageByImageID(imageId, includeImage).ToList();
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Customers\CustomerIDManager.cs(54):			List<ImageInfo> image = ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(customerIdentification.ImageID, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Documents\HelpAndTipsManager.cs(12):			List<HelpAndTipsInfo> helpAndTips = ServiceChannel.Return<IDocumentService, List<HelpAndTipsInfo>>(service => service.GetHelpAndTips());
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\ForeignExchange\ForeignExchangeManager.cs(33):			List<FXTickets1Info> agentTicketInfo = ServiceChannel.Return<IForeignExchange, List<FXTickets1Info>>(service => service.GetFXTicketsForAgent(agentId, startDate, endDate));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\ForeignExchange\ForeignExchangeManager.cs(39):			List<FXTickets2Info> ticketDetailInfo = ServiceChannel.Return<IForeignExchange, List<FXTickets2Info>>(service => service.GetAllFXTickets2(ticketIds));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\ForeignExchange\ForeignExchangeManager.cs(45):			ResellerInfo resellerInfo = ServiceChannel.Return<IForeignExchange, ResellerInfo>(service => service.GetReseller(agentId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\ForeignExchange\FXTicketVoidManager.cs(14):			List<FXTicketsInfo> tickets = ServiceChannel.Return<IForeignExchange, List<FXTicketsInfo>>(service => service.GetFXTicketsByDate(userId, agentId, date, showAllUsers));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(18):                walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.OrderRequest(orderid, modifyUserId, loginID, ""));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(33):                walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.PaymentRequest(orderid, modifyUserId, loginID, ""));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(49):                walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.RefundRequest(orderid, modifyUserId, loginID, ""));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(66):            walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.OrderAuthorizationReverseByOrderId(orderid, modifyUserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(84):            walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.PaymentAuthorizationReverseByOrderId(orderid, modifyUserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(102):            walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.RefundAuthorizationReverseByOrderId(orderid, modifyUserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(121):            return ServiceChannel.Return<IISO8583WalmartService, List<GatewayWalmartChileLogInfo>>(service => service.GetLogByOrderId(orderid));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(126):            return ServiceChannel.Return<IISO8583WalmartService, List<GatewayWalmartChileLogInfo>>(service => service.GetLogByOrderNo(orderNo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(136):                gatewayWalmartChileLogSearch = ServiceChannel.Return<IISO8583WalmartService, GatewayWalmartChileLogSearch>(service => service.SearchLog(searchOptions.DateFrom, searchOptions.DateTo,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Model\OrderCreate\BankDeposit\BankDepositPricingInfo.cs(141):			RateAndFeeInfo rateAndFeeInfo = ServiceChannel.Return<IPricingService, RateAndFeeInfo>(service => service.GetRatesAndFees(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Model\StoreOperations\IdentificationManager.cs(113):			List<ImageInfo> images = ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(customerIdentification.ImageID, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Orders\AmountRecalculation.cs(196):			var correspBuyRate = ServiceChannel.Return<IPricingService, CorrespBaseRatesSavedInfo>(service => service.GetItemForGivenDate(itemId, transDate));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Orders\AmountRecalculation.cs(203):			var correspBaseRate = ServiceChannel.Return<IPricingService, CorrespBaseRatesInfo>(service => service.GetCorrespAndCurTo(correspondentId, currencyTo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Orders\OrderReceiptManager.cs(91):			Stream stream = ServiceChannel.Return<IReportingService, Stream>(service => service.GetPayingAgentReceipt(orderId, userLoginLocale, receiptPrintingType, applicationFEDBId, renderFormat, userId, agentId, agentLocId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Orders\OrderReceiptManager.cs(102):			Stream stream = ServiceChannel.Return<IReportingService, Stream>(service => service.GetRefundAgentReceipt(orderId, userLoginLocale, receiptPrintingType, applicationFEDBId, renderFormat, userId, agentId, agentLocId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Orders\OrderReceiptManager.cs(111):			bool templateExists = ServiceChannel.Return<IReportingService, bool>(service => service.SSRSTemplateExists(orderId, userLoginLocale, receiptPrintingType, receiptType, applicationFEDBId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Orders\OrderReceiptManager.cs(118):			List<ComplianceFormInfo> templateExists = ServiceChannel.Return<IReportingService, List<ComplianceFormInfo>>(service => service.SSRSComplianceTemplateList(orderId, userLoginLocale, receiptPrintingType, receiptType, applicationFEDBId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\CustomerReceiptManager.cs(56):			return ServiceChannel.Return<IReportingService, OrderRequireWatermarkInfo>(service => service.MTOrderRequiresReprintWatermark(orderId, isNewOrder));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\IdentificationCheckManager.cs(81):			var info = ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(imageId, includeImages));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\OrderEntry\CreateManualOrderFormManager.cs(50):			return ServiceChannel.Return<IDocumentService, List<DocumentFilesInfo>>(service => service.SearchDocumentsByFileNameMatch(fileNameMatch, ommitImageData));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(61):				TermCardInfo card = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(riaLinkCardNo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(112):				riaLinkCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIds));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(132):				riaLinkCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerPrimaryKeys));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(214):				TermCardInfo card = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(riaLinkCardNo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(286):				riaLinkCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIDs));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(430):				TermCardInfo card = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(riaLinkCardNo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(501):				riaLinkCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIDs));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(528):				TermCardInfo card = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(request.CustomerCardNumber));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(618):				riaLinkCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIDs));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\PossibleDuplicateActionManager.cs(16):			ComplianceInfo info = ServiceChannel.Return<ISarService, ComplianceInfo>(service => service.GetComplianceMatchById(id));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\Reports\CommissionReportManager.cs(16):			List<ReceivingAgentTransactionCommission> transactions = ServiceChannel.Return<IAccountingService, List<ReceivingAgentTransactionCommission>>(service => service.GetAgentCommission(agentId, agentLocationIdCSV, "", transactionType, beginDate, endDate, 0));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\RiaLink\BillerTabManager.cs(30):			BillBeneficiaryInfo billerInfo2 = ServiceChannel.Return<IBillPaymentService, BillBeneficiaryInfo>(service => service.InsertBiller(billerInfo, modifiedUserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\RiaLink\BillerTabManager.cs(112):			List<BillBeneficiaryInfo> infos = ServiceChannel.Return<IBillPaymentService, List<BillBeneficiaryInfo>>(service => service.GetBillerDetails(customerId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\RiaLink\BillerTabManager.cs(118):			BillBeneficiaryInfo billerInfo = ServiceChannel.Return<IBillPaymentService, BillBeneficiaryInfo>(service => service.GetBiller(customerAccountId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\RiaLink\CustomerDetailTabManager.cs(35):			return ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(new List<int> { customerId }));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\RiaLink\CustomerSearchManager.cs(78):			termCardInfo = ServiceChannel.Return<IRiaLinkService, TermCardInventoryInfo>(service => service.GetTermCardByProcessorCardId(processorCardId, processor));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\RiaLink\CustomerSearchManager.cs(94):			List<TermCardInfo> cards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customers.ConvertAll(c => c.CustomerID)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\RiaLink\CustomerSearchManager.cs(107):			TermCardInfo termCard = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(cardNumber));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\RiaLink\CustomerSearchManager.cs(175):			TermCardInfo termCardInfo = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(cardNumber));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\MoneyTransfer\Receiving\RiaLink\CustomerSearchManager.cs(217):			return ServiceChannel.Return<CES.SL.BillPayment.Contract.IBillPaymentService, List<CES.SL.BillPayment.Contract.BillBeneficiaryInfo>>(service => service.GetBillersForCust(customerIds));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Payment\PayoutExchangeRateManager.cs(34):			return ServiceChannel.Return<IPricingService, CorrespPayoutRateInfo>(service => service.GetCorrespPayoutRateInfo(itemId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Payment\PayoutExchangeRateManager.cs(39):			return ServiceChannel.Return<IPricingService, List<PayoutExchangeRateInfo>>(service => service.GetLatestExchangeRates(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\Payment\PayoutExchangeRateManager.cs(45):			var infos = ServiceChannel.Return<IPricingService, List<CorrespPayoutRateInfo>>(service => service.GetCorrespPayoutRateInfos(request, out temp));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\StoreOperations\OFAC\OFACValidationManager.cs(26):			var response = ServiceChannel.Return<IOfacService, ValidationResponse>(service => service.Match2(ofacUser));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\StoreOperations\OFAC\WatchListValidationManager.cs(20):			var response = ServiceChannel.Return<IOfacService, WatchlistResponse>(service => service.WatchlistMatch(WatchLustUser, 506, 0, userID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\StoreOperations\StoreTransferManager.cs(871):				receiptDataStream = ServiceChannel.Return<IReportingService, Stream>(service =>
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\ThermalReceiptManager.cs(24):			List<ReceiptLabelsInfo> labelInfo = ServiceChannel.Return<IReportingService, List<ReceiptLabelsInfo>>(service => service.GetReceiptLabels(serviceId, productId, productItemId, languageId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\ThermalReceiptManager.cs(61):			return ServiceChannel.Return<IReportingService, ReceiptTemplateInfo>(service => service.GetTemplateInfo(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\ThermalReceiptManager.cs(66):			return ServiceChannel.Return<IReportingService, List<DisclaimerInfo>>(service => service.GetThermalReceiptDisclaimer(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\ThermalReceiptManager.cs(71):			return ServiceChannel.Return<IReportingService, CompanyInfo>(service => service.GetThermalReceiptCompanyInfo(companyId, companyCountry));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Bll\ThermalReceiptManager.cs(76):			return ServiceChannel.Return<IReportingService, int>(service => service.GetReceiptLanguageID(language1, language2));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Orders\Providers\Reports\CustomerReceiptManager.cs(72):				return ServiceChannel.Return<IReportingService, GetReceivingAgentCustomerReceiptResponse>(service => service.GetReceivingAgentCustomerReceipt(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Orders\Providers\Reports\CustomerReceiptManager.cs(80):			return ServiceChannel.Return<IReportingService, Stream>(service => service.GetPreOrderDisclosureReceipt(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Orders\Providers\Reports\CustomerReceiptManager.cs(110):				receiptDataStream = ServiceChannel.Return<IReportingService, Stream>(service => service.GetReceivingAgentCustomerReceipt(orderReceiptInfo, SetReportOptions(locale, renderFormat),
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Orders\Providers\Reports\CustomerReceiptManager.cs(141):				receiptDataStream = ServiceChannel.Return<IReportingService, Stream>(service =>
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Orders\Providers\Reports\CustomerReceiptManager.cs(207):			return ServiceChannel.Return<IReportingService, Stream>(service => service.GetPEPReceipt(orderReceiptInfo, SetReportOptions(locale, ReportRenderTypes.PDF)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Orders\Providers\Reports\CustomerReceiptManager.cs(903):			return ServiceChannel.Return<IReportingService, Stream>(service => service.GetReceivingAgentCustomerReceipt(orderReceiptInfo, SetReportOptions(locale, renderformat), printingType, applicationFEDBId, userId, agentId, agentLocId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Orders\Providers\Reports\CustomerReceiptManager.cs(908):			return ServiceChannel.Return<IReportingService, Stream>(service => service.GetConsumerReceipt(orderReceiptInfo, SetReportOptions(locale, renderFormat), printingType, applicationFEDBId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Orders\Providers\Reports\CustomerReceiptManager.cs(913):			return ServiceChannel.Return<IReportingService, Stream>(service => service.GetOrderOtherReceipt(orderReceiptInfo, SetReportOptions(locale, renderFormat), formType));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Orders\Providers\Reports\ManualOrderReceiptManager.cs(158):			return ServiceChannel.Return<IReportingService, Stream>(service => service.GetReceivingAgentManualReceipt(orderManualReceiptInfo,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Orders\Providers\Validation\OfacValidator.cs(40):			var response = ServiceChannel.Return<IOfacService, ValidationResponse>(service => service.Match2(ofacUserCan));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Orders\Providers\Validation\SarValidator.cs(132):			SarValidationResponse sarValidationResponse = ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate(sarValidationRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Agents\Providers\Finance\LimitValidationManager.cs(335):				decimal agentUsdTotalToday = ServiceChannel.Return<IAccountingService, decimal>(service => service.GetTransactionSummaryTotalsByAgent(receivingAgentInfo.AgentID,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Agents\Providers\Finance\LimitValidationManager.cs(403):			TransactionSummaryTotalInfo info = ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>(service => service.GetTransactionSummaryTotalsByAgent(payingAgentId, currency, false, false, DateTime.Today, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Agents\Providers\Finance\LimitValidationManager.cs(416):			TransactionSummaryTotalInfo info = ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>(service => service.GetTransactionSummaryTotalsByAgentLocation(payingAgentId, payingAgentLocationId, currency, false, false, DateTime.Today, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Agents\Providers\Finance\LimitValidationManager.cs(432):			parentDepartment = ServiceChannel.Return<IAccountingService, DepartmentInfo>(service => service.GetParentDepartment(ContactManager.Get(agentId).DepartmentID)).DepartmentID;
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Customers\Providers\CustomerIDManager.cs(221):			List<ImageInfo> images = ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(customerIdentification.ImageID, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Customers\Providers\CustomerRiaLinkManager.cs(49):			List<TermCardInfo> termCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(new List<int> { customerId }));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Customers\Providers\CustomerRiaLinkManager.cs(55):			return ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardId(cardId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\StoreOps\StoreOps.Customers\Providers\CustomerRiaLinkManager.cs(60):			return ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(cardNumber));
  Matching lines: 160    Matching files: 46    Total files searched: 1565
