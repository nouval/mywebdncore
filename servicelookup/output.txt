ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetCorporateFxReceipts(request))
ServiceChannel.Return<IDocumentService, List<HelpAndTipsInfo>>|ServiceChannel.Return<IDocumentService, List<HelpAndTipsInfo>>(service => service.GetHelpAndTips())
ServiceChannel.Return<IForeignExchange, List<FXTickets1Info>>|ServiceChannel.Return<IForeignExchange, List<FXTickets1Info>>(service => service.GetFXTicketsForAgent(agentId, startDate, endDate))
ServiceChannel.Return<IForeignExchange, List<FXTickets2Info>>|ServiceChannel.Return<IForeignExchange, List<FXTickets2Info>>(service => service.GetAllFXTickets2(ticketIds))
ServiceChannel.Return<IForeignExchange, ResellerInfo>|ServiceChannel.Return<IForeignExchange, ResellerInfo>(service => service.GetReseller(agentId))
ServiceChannel.Return<IForeignExchange, List<FXTicketsInfo>>|ServiceChannel.Return<IForeignExchange, List<FXTicketsInfo>>(service => service.GetFXTicketsByDate(userId, agentId, date, showAllUsers))
ServiceChannel.Return<IAccountingService, decimal>|
ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>|ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>(service => service.GetTransactionSummaryTotalsByAgent(payingAgentId, currency, false, false, DateTime.Today, false))
ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>|ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>(service => service.GetTransactionSummaryTotalsByAgentLocation(payingAgentId, payingAgentLocationId, currency, false, false, DateTime.Today, false))
ServiceChannel.Return<IAccountingService, DepartmentInfo>|ServiceChannel.Return<IAccountingService, DepartmentInfo>(service => service.GetParentDepartment(ContactManager.Get(agentId).DepartmentID)).DepartmentID
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetPreOrderDisclosureReceipt(request))
ServiceChannel.Return<IReportingService, Stream>|
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetSSRSComplianceForm(orderReceiptInfo, SetReportOptions(locale, renderFormat), applicationFEDBId, Info, PrintingType, userId, agentId, agentId))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetPEPReceipt(orderReceiptInfo, SetReportOptions(locale, ReportRenderTypes.PDF)))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetReceivingAgentCustomerReceipt(orderReceiptInfo, SetReportOptions(locale, renderformat), printingType, applicationFEDBId, userId, agentId, agentLocId))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetConsumerReceipt(orderReceiptInfo, SetReportOptions(locale, renderFormat), printingType, applicationFEDBId))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetOrderOtherReceipt(orderReceiptInfo, SetReportOptions(locale, renderFormat), formType))
ServiceChannel.Return<IReportingService, Stream>|
ServiceChannel.Return<IOfacService, ValidationResponse>|ServiceChannel.Return<IOfacService, ValidationResponse>(service => service.Match2(ofacUserCan))
ServiceChannel.Return<ISarService, SarValidationResponse>|ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate(sarValidationRequest))
ServiceChannel.Return<IAgentService, ReceivingAgentInfo>|
ServiceChannel.Return<IAgentService, ReceivingAgentInfo>|ServiceChannel.Return<IAgentService, ReceivingAgentInfo>(service => service.GetReceivingAgent(recAgentId))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetBillInfoForPrinting(billReceiptInfo, reportingOptions, objPrintType, 0))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetManualBillInfoForPrinting(reportingOptions))
ServiceChannel.Return<IAgentService, AgentLoginSettingsInfo>|
ServiceChannel.Return<IAgentService, AgentLoginSettingsInfo>|
ServiceChannel.Return<IAgentService, AgentLoginSettingsInfo>|
ServiceChannel.Return<IAgentService, AgentLoginSettingsInfo>|
ServiceChannel.Return<IImageService, ImageInfo>|ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(imageId))
ServiceChannel.Return<IImageService, ImageInfo>|ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(imageId))
ServiceChannel.Return<IPricingService, RateAndFeeInfo>|ServiceChannel.Return<IPricingService, RateAndFeeInfo>(service => service.GetRatesAndFees(request))
ServiceChannel.Return<IPricingService, FeeInfo>|ServiceChannel.Return<IPricingService, FeeInfo>(service => service.Get(feeInfoRequest))
ServiceChannel.Return<IPricingService, FeeInfo>|ServiceChannel.Return<IPricingService, FeeInfo>(service => service.Get(feeInfoRequest))
ServiceChannel.Return<IPricingService, FeeInfo>|ServiceChannel.Return<IPricingService, FeeInfo>(service => service.GetLowestByCountry(feeInfoRequest))
ServiceChannel.Return<IAccountingService, ARBalanceCheckInfo>|ServiceChannel.Return<IAccountingService, ARBalanceCheckInfo>(service => service.CheckARBalance(this.Agent.Contact.NameID))
ServiceChannel.Return<CES.SL.BillPayment.Contract.IBillPaymentService, List<CES.SL.BillPayment.Contract.BillerLocationInfo>>|
ServiceChannel.Return<IBillPaymentService, List<BillInfo>>|ServiceChannel.Return<IBillPaymentService, List<BillInfo>>(service => service.SearchOrders(searchOptions.ReceivingAgentIds, searchOptions.TransNo, searchOptions.DateFrom, searchOptions.DateTo, searchOptions.Status, TransType, searchOptions.PagingOptions.RowNumber, searchOptions.PagingOptions.PageSize, searchOptions.PhoneNumber, Convert.ToInt32(searchOptions.EnteredByIds), searchOptions.Branch, searchOptions.BillerLocID))
ServiceChannel.Return<IBillPaymentService, BillCommissionInfo>|ServiceChannel.Return<IBillPaymentService, BillCommissionInfo>(service => service.GetAgentCommissionReport(agentID, dateStart, dateEnd, BillerLocID, Country, CountryID, AgentLocID, AgentLocationList))
ServiceChannel.Return<IBillPaymentService, List<BillPaymentInfo>>|ServiceChannel.Return<IBillPaymentService, List<BillPaymentInfo>>(service => service.TransactionTypeList())
ServiceChannel.Return<IBillPaymentService, List<BPPromptInfo>>|ServiceChannel.Return<IBillPaymentService, List<BPPromptInfo>>(service => service.GetBillPaymentPromptDailog(billerLocId))
ServiceChannel.Return<IBillPaymentService, List<BillStatusInfo>>|ServiceChannel.Return<IBillPaymentService, List<BillStatusInfo>>(service => service.StatusTypeList(fkey1))
ServiceChannel.Return<IBillPaymentService, string>|ServiceChannel.Return<IBillPaymentService, string>(service => service.VoidBillPaymentTransaction(tranid, userid, entryType, tellerDrawerInstanceID))
ServiceChannel.Return<IBillPaymentService, List<BeneficiaryEnrollCardInfo>>|ServiceChannel.Return<IBillPaymentService, List<BeneficiaryEnrollCardInfo>>(service => service.GetBeneficiaryDetails(customerId))
ServiceChannel.Return<IBillPaymentService, List<BillBeneficiaryInfo>>|ServiceChannel.Return<IBillPaymentService, List<BillBeneficiaryInfo>>(service => service.GetBillerDetails(customerId))
ServiceChannel.Return<IBillPaymentService, BeneficiaryEnrollCardInfo>|ServiceChannel.Return<IBillPaymentService, BeneficiaryEnrollCardInfo>(service => service.GetBeneficiaryTerminalDetails(beneficiaryId))
ServiceChannel.Return<IBillPaymentService, BillerLocationInfo>|ServiceChannel.Return<IBillPaymentService, BillerLocationInfo>(service => service.GetBillerTerminalDetails(customerAccountId))
ServiceChannel.Return<IBillPaymentService, int>|ServiceChannel.Return<IBillPaymentService, int>(service => service.UpdateBillerTerminalDetails(info, customerId))
ServiceChannel.Return<IBillPaymentService, List<WirelessTopUpInfo>>|
ServiceChannel.Return<IBillPaymentService, List<TopUpFilteredCountryListInfo>>|
ServiceChannel.Return<IBillPaymentService, List<TransInfo>>|ServiceChannel.Return<IBillPaymentService, List<TransInfo>>(service => service.CustomersTransLookUp(customerID, CustomerNo, productType))
ServiceChannel.Return<IBillPaymentService, List<TopUpBillernameListInfo>>|
ServiceChannel.Return<IBillPaymentService, List<TopUpBillernameListInfo>>|
ServiceChannel.Return<IBillPaymentService, string>|ServiceChannel.Return<IBillPaymentService, string>(service => service.GetCoumputerID(macaddress, agentid))
ServiceChannel.Return<IBillPaymentService, int>|ServiceChannel.Return<IBillPaymentService, int>(service => service.GetReceiptType(computerid, setting))
ServiceChannel.Return<IBillPaymentService, bool>|ServiceChannel.Return<IBillPaymentService, bool>(service => service.SaveReceiptType(computerid, settingid, setting, this.profile.User.UserId))
ServiceChannel.Return<IBillPaymentService, bool>|ServiceChannel.Return<IBillPaymentService, bool>(service => service.VerifyServicesOffered(serviceId, productId, 0, 0, agent.DefaultAddress.Country, agent.DefaultAddress.State, AgentCityID, "", "", agent.LoginSettings.BaseCurrency, "", 1, DateTime.Now, 0, 0, agent.RecAgent.AgentID, 0, 0, 0))
ServiceChannel.Return<IBillPaymentService, string>|ServiceChannel.Return<IBillPaymentService, string>(service => service.GetConfirmationNumber(tranid))
ServiceChannel.Return<IBillPaymentService, CancelTransactionResponse>|ServiceChannel.Return<IBillPaymentService, CancelTransactionResponse>(service => service.CancelTransaction(1, 520, tranid, this.profile.User.UserId.ToString()))
ServiceChannel.Return<IBillPaymentService, List<BpCountryList>>|ServiceChannel.Return<IBillPaymentService, List<BpCountryList>>(service => service.GetCountryBillerListBP(languageId))
ServiceChannel.Return<IBillPaymentService, int>|ServiceChannel.Return<IBillPaymentService, int>(service => service.GetAgentCityID(AgentCountry, AgentPostalCode))
ServiceChannel.Return<IBillPaymentService, Stream>|
ServiceChannel.Return<IBillPaymentService, Stream>|
ServiceChannel.Return<IBillPaymentService, BPThermalReceiptInfo>|ServiceChannel.Return<IBillPaymentService, BPThermalReceiptInfo>(service => service.GetBPThermalReceiptInfo(transId, locale, originalReceipt))
ServiceChannel.Return<IBillPaymentService, BPThermalReceiptInfo>|ServiceChannel.Return<IBillPaymentService, BPThermalReceiptInfo>(service => service.GetTPThermalReceiptInfo(transId, pin, locale, originalReceipt, userId))
ServiceChannel.Return<IBillPaymentService, OnlineBillInfo>|ServiceChannel.Return<IBillPaymentService, OnlineBillInfo>(service => service.GetSpainTopUpReceipt(transId, locale, originalReceipt, RefNum))
ServiceChannel.Return<IBillPaymentService, string>|ServiceChannel.Return<IBillPaymentService, string>(service => service.GetPSReceiptVlaue(transId))
ServiceChannel.Return<IBillPaymentService, List<CustomerInfo>>|ServiceChannel.Return<IBillPaymentService, List<CustomerInfo>>(service => service.GetCustomers(info, rowNumber, pageSize))
ServiceChannel.Return<IBillPaymentService, int>|ServiceChannel.Return<IBillPaymentService, int>(service => service.CheckCustomerNo(lTempNo, sCustomerNo))
ServiceChannel.Return<IPricingService, List<AgentProgramInfo>>|ServiceChannel.Return<IPricingService, List<AgentProgramInfo>>(service => service.GetAllProgramsForAgent(agentId)))
ServiceChannel.Return<IPricingService, List<AgentProgramInfo>>|ServiceChannel.Return<IPricingService, List<AgentProgramInfo>>(service => service.GetAllProgramsByAgentCurrency(agentId, currency)))
ServiceChannel.Return<IPricingService, List<string>>|ServiceChannel.Return<IPricingService, List<string>>(service => service.GetPayoutCurrencyListByCountry(country)))
ServiceChannel.Return<IBillPaymentService, List<WirelessTopUpInfo>>|ServiceChannel.Return<IBillPaymentService, List<WirelessTopUpInfo>>(service => service.CountryBillerList()))
ServiceChannel.Return<IBillPaymentService, List<BillerLocationInfo>>|ServiceChannel.Return<IBillPaymentService, List<BillerLocationInfo>>(service => service.GetBillerLookUpList(billerName, country, baseCurrency, agentCountry, agentid))
ServiceChannel.Return<CES.SL.BillPayment.Contract.IBillPaymentService, List<CES.SL.BillPayment.Contract.CarrierBiller>>|ServiceChannel.Return<CES.SL.BillPayment.Contract.IBillPaymentService, List<CES.SL.BillPayment.Contract.CarrierBiller>>(service => service.GetBillerCarrierLookUp(billerName, transtype, AgentCountry, AgentState, AgentID, AgentLocID, AgentCurrency))
ServiceChannel.Return<ISarService, List<ComplianceLogEntryInfo>>|ServiceChannel.Return<ISarService, List<ComplianceLogEntryInfo>>(service => service.GetComplianceLogEntriesByOrderId(orderID))
ServiceChannel.Return<ISarService, List<SARFilterInfo>>|ServiceChannel.Return<ISarService, List<SARFilterInfo>>(service => service.GetSARFilters(complianceLogEntryInfoList.ConvertAll(c => c.IssueID)))
ServiceChannel.Return<ISarService, List<ComplianceLogEntryInfo>>|ServiceChannel.Return<ISarService, List<ComplianceLogEntryInfo>>(service => service.GetComplianceLogEntries(typesCSV, SARCriteriaCSV, fromDate, toDate))
ServiceChannel.Return<ISarService, List<SARFilterInfo>>|ServiceChannel.Return<ISarService, List<SARFilterInfo>>(service => service.GetSARFilters(issueIdList.Distinct().ToList()))
ServiceChannel.Return<IOfacService, List<int>>|ServiceChannel.Return<IOfacService, List<int>>(service => service.GetOFACLogOrderIdsByDate(fromDate, toDate))
ServiceChannel.Return<IOfacService, List<OFACLogInfo>>|ServiceChannel.Return<IOfacService, List<OFACLogInfo>>(service => service.GetOFACLogEntriesByOrderIds(matchedOrderIds.ToCsv()))
ServiceChannel.Return<ISarService, List<RejectedOrderInfo>>|ServiceChannel.Return<ISarService, List<RejectedOrderInfo>>(service => service.GetSARRejectedOrdersByDateAndRecAgents(recAgents.ConvertAll(r => r.NameID), fromDate, toDate))
ServiceChannel.Return<ISarService, List<SARFilterInfo>>|ServiceChannel.Return<ISarService, List<SARFilterInfo>>(service => service.GetSARFilters(issueIds))
ServiceChannel.Return<ISarService, List<RejectedOrderInfo>>|ServiceChannel.Return<ISarService, List<RejectedOrderInfo>>(service => service.GetOFACRejectedOrdersByDateAndRecAgents(recAgentIDs, fromDate, toDate))
ServiceChannel.Return<ISarService, List<SARFilterInfo>>|ServiceChannel.Return<ISarService, List<SARFilterInfo>>(service => service.GetSARFilters(issueIds.ToList()))
ServiceChannel.Return<ISarService, int>|ServiceChannel.Return<ISarService, int>(service => service.AddComplianceIssue(orderID, userNameID, message, note, onHoldReason, onHold, serviceTypeID, issueTypeID, issueItemID, 0))
ServiceChannel.Return<ISarService, int>|ServiceChannel.Return<ISarService, int>(service => service.CheckIssueStatus(orderID, issueTypeID, issueItemID))
ServiceChannel.Return<IOfacService, List<OFACListInfo>>|ServiceChannel.Return<IOfacService, List<OFACListInfo>>(service => service.GetAllBlackLists(agentId))
ServiceChannel.Return<IOfacService, List<OFACListHistoryInfo>>|ServiceChannel.Return<IOfacService, List<OFACListHistoryInfo>>(service => service.GetListHistory(listId))
ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>|ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>(service => service.GetAllAliases(blackListInfo.ListID, entryID))
ServiceChannel.Return<IOfacService, OFACEntryInfo>|ServiceChannel.Return<IOfacService, OFACEntryInfo>(service => service.GetEntryInfo(blackListInfo.ListID, entryID))
ServiceChannel.Return<IOfacService, List<OFACNameInfo>>|ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetAllNamesByCsv(blackListInfo.ListID, entryId.ToString()))
ServiceChannel.Return<IOfacService, OFACListInfo>|ServiceChannel.Return<IOfacService, OFACListInfo>(service => service.GetBlackList(listId, agentId))
ServiceChannel.Return<IOfacService, List<OFACNameInfo>>|ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetNameList(blackListInfo.ListID, filter))
ServiceChannel.Return<IOfacService, List<OFACNameInfo>>|ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetAllNamesByCsv(blackListInfo.ListID, OfACNameIDs.ToCsv()))
ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>|ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>(service => service.GetAllAliasesByCSV(blackListInfo.ListID, OfACNameIDs.ToCsv()))
ServiceChannel.Return<IOfacService, List<OFACNameCombinedInfo>>|ServiceChannel.Return<IOfacService, List<OFACNameCombinedInfo>>(service => service.GetNameCombinedList(blackListInfo.ListID, filter))
ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>|ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>(service => service.GetAliasList(blackListInfo.ListID, filter))
ServiceChannel.Return<IOfacService, List<OFACAddressInfo>>|ServiceChannel.Return<IOfacService, List<OFACAddressInfo>>(service => service.GetAddressList(blackListInfo.ListID, filter))
ServiceChannel.Return<IOfacService, List<OFACNameInfo>>|ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetAllNamesByCsv(listId, ent_nums.ToCsv()))
ServiceChannel.Return<IOfacService, ValidationResponse>|ServiceChannel.Return<IOfacService, ValidationResponse>(service => service.Match2(ofacUser))
ServiceChannel.Return<ISarService, List<SARFieldInfo>>|ServiceChannel.Return<ISarService, List<SARFieldInfo>>(service => service.GetAllFieldsByFilterID(filterId))
ServiceChannel.Return<ISarService, SARFilterInfo>|ServiceChannel.Return<ISarService, SARFilterInfo>(service => service.GetSARFilter(filterId))
ServiceChannel.Return<IAccountingService, Dictionary<int, DepartmentInfo>>|ServiceChannel.Return<IAccountingService, Dictionary<int, DepartmentInfo>>(service => service.GetAllDepartments(locationIDs))
ServiceChannel.Return<ISarService, List<SARFilterInfo>>|ServiceChannel.Return<ISarService, List<SARFilterInfo>>(service => service.GetSARFilterListByCountry(countryFrom, countryTo, agentIdList, showDisabled))
ServiceChannel.Return<IAccountingService, Dictionary<int, DepartmentInfo>>|ServiceChannel.Return<IAccountingService, Dictionary<int, DepartmentInfo>>(service => service.GetAllDepartments(locationIDs))
ServiceChannel.Return<ISarService, SarValidationResponse>|ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate(sarValidationRequest))
ServiceChannel.Return<ISarService, SarValidationResponse>|ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate_CEX(506, 0,sarValidationRequest))
ServiceChannel.Return<IPricingService, RateInfo>|ServiceChannel.Return<IPricingService, RateInfo>(service => service.GetRateInfo(rateInfoRequest))
ServiceChannel.Return<IImageService, ImageIDInfo>|ServiceChannel.Return<IImageService, ImageIDInfo>(service => service.CreateCustomerIdentificationImageV2(identificationImageInfo))
ServiceChannel.Return<IImageService, ImageInfo>|ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(id))
ServiceChannel.Return<IImageService, List<ImageInfo>>|ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(imageId, includeImage))
ServiceChannel.Return<IImageService, List<CustomerIDImageInfo>>|ServiceChannel.Return<IImageService, List<CustomerIDImageInfo>>(service => service.GetImageByImageID(imageId, includeImage).ToList()
ServiceChannel.Return<IImageService, List<ImageInfo>>|ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(customerIdentification.ImageID, false))
ServiceChannel.Return<IDocumentService, List<HelpAndTipsInfo>>|ServiceChannel.Return<IDocumentService, List<HelpAndTipsInfo>>(service => service.GetHelpAndTips())
ServiceChannel.Return<IForeignExchange, List<FXTickets1Info>>|ServiceChannel.Return<IForeignExchange, List<FXTickets1Info>>(service => service.GetFXTicketsForAgent(agentId, startDate, endDate))
ServiceChannel.Return<IForeignExchange, List<FXTickets2Info>>|ServiceChannel.Return<IForeignExchange, List<FXTickets2Info>>(service => service.GetAllFXTickets2(ticketIds))
ServiceChannel.Return<IForeignExchange, ResellerInfo>|ServiceChannel.Return<IForeignExchange, ResellerInfo>(service => service.GetReseller(agentId))
ServiceChannel.Return<IForeignExchange, List<FXTicketsInfo>>|ServiceChannel.Return<IForeignExchange, List<FXTicketsInfo>>(service => service.GetFXTicketsByDate(userId, agentId, date, showAllUsers))
ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>|ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.OrderRequest(orderid, modifyUserId, loginID, ""))
ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>|ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.PaymentRequest(orderid, modifyUserId, loginID, ""))
ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>|ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.RefundRequest(orderid, modifyUserId, loginID, ""))
ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>|ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.OrderAuthorizationReverseByOrderId(orderid, modifyUserId))
ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>|ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.PaymentAuthorizationReverseByOrderId(orderid, modifyUserId))
ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>|ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.RefundAuthorizationReverseByOrderId(orderid, modifyUserId))
ServiceChannel.Return<IISO8583WalmartService, List<GatewayWalmartChileLogInfo>>|ServiceChannel.Return<IISO8583WalmartService, List<GatewayWalmartChileLogInfo>>(service => service.GetLogByOrderId(orderid))
ServiceChannel.Return<IISO8583WalmartService, List<GatewayWalmartChileLogInfo>>|ServiceChannel.Return<IISO8583WalmartService, List<GatewayWalmartChileLogInfo>>(service => service.GetLogByOrderNo(orderNo))
ServiceChannel.Return<IISO8583WalmartService, GatewayWalmartChileLogSearch>|
ServiceChannel.Return<IPricingService, RateAndFeeInfo>|ServiceChannel.Return<IPricingService, RateAndFeeInfo>(service => service.GetRatesAndFees(request))
ServiceChannel.Return<IImageService, List<ImageInfo>>|ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(customerIdentification.ImageID, false))
ServiceChannel.Return<IPricingService, CorrespBaseRatesSavedInfo>|ServiceChannel.Return<IPricingService, CorrespBaseRatesSavedInfo>(service => service.GetItemForGivenDate(itemId, transDate))
ServiceChannel.Return<IPricingService, CorrespBaseRatesInfo>|ServiceChannel.Return<IPricingService, CorrespBaseRatesInfo>(service => service.GetCorrespAndCurTo(correspondentId, currencyTo))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetPayingAgentReceipt(orderId, userLoginLocale, receiptPrintingType, applicationFEDBId, renderFormat, userId, agentId, agentLocId))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetRefundAgentReceipt(orderId, userLoginLocale, receiptPrintingType, applicationFEDBId, renderFormat, userId, agentId, agentLocId))
ServiceChannel.Return<IReportingService, bool>|ServiceChannel.Return<IReportingService, bool>(service => service.SSRSTemplateExists(orderId, userLoginLocale, receiptPrintingType, receiptType, applicationFEDBId))
ServiceChannel.Return<IReportingService, List<ComplianceFormInfo>>|ServiceChannel.Return<IReportingService, List<ComplianceFormInfo>>(service => service.SSRSComplianceTemplateList(orderId, userLoginLocale, receiptPrintingType, receiptType, applicationFEDBId))
ServiceChannel.Return<IReportingService, OrderRequireWatermarkInfo>|ServiceChannel.Return<IReportingService, OrderRequireWatermarkInfo>(service => service.MTOrderRequiresReprintWatermark(orderId, isNewOrder))
ServiceChannel.Return<IImageService, List<ImageInfo>>|ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(imageId, includeImages))
ServiceChannel.Return<IDocumentService, List<DocumentFilesInfo>>|ServiceChannel.Return<IDocumentService, List<DocumentFilesInfo>>(service => service.SearchDocumentsByFileNameMatch(fileNameMatch, ommitImageData))
ServiceChannel.Return<IRiaLinkService, TermCardInfo>|ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(riaLinkCardNo))
ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>|ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIds))
ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>|ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerPrimaryKeys))
ServiceChannel.Return<IRiaLinkService, TermCardInfo>|ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(riaLinkCardNo))
ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>|ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIDs))
ServiceChannel.Return<IRiaLinkService, TermCardInfo>|ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(riaLinkCardNo))
ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>|ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIDs))
ServiceChannel.Return<IRiaLinkService, TermCardInfo>|ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(request.CustomerCardNumber))
ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>|ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIDs))
ServiceChannel.Return<ISarService, ComplianceInfo>|ServiceChannel.Return<ISarService, ComplianceInfo>(service => service.GetComplianceMatchById(id))
ServiceChannel.Return<IAccountingService, List<ReceivingAgentTransactionCommission>>|ServiceChannel.Return<IAccountingService, List<ReceivingAgentTransactionCommission>>(service => service.GetAgentCommission(agentId, agentLocationIdCSV, "", transactionType, beginDate, endDate, 0))
ServiceChannel.Return<IBillPaymentService, BillBeneficiaryInfo>|ServiceChannel.Return<IBillPaymentService, BillBeneficiaryInfo>(service => service.InsertBiller(billerInfo, modifiedUserId))
ServiceChannel.Return<IBillPaymentService, List<BillBeneficiaryInfo>>|ServiceChannel.Return<IBillPaymentService, List<BillBeneficiaryInfo>>(service => service.GetBillerDetails(customerId))
ServiceChannel.Return<IBillPaymentService, BillBeneficiaryInfo>|ServiceChannel.Return<IBillPaymentService, BillBeneficiaryInfo>(service => service.GetBiller(customerAccountId))
ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>|ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(new List<int> { customerId }))
ServiceChannel.Return<IRiaLinkService, TermCardInventoryInfo>|ServiceChannel.Return<IRiaLinkService, TermCardInventoryInfo>(service => service.GetTermCardByProcessorCardId(processorCardId, processor))
ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>|ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customers.ConvertAll(c => c.CustomerID)))
ServiceChannel.Return<IRiaLinkService, TermCardInfo>|ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(cardNumber))
ServiceChannel.Return<IRiaLinkService, TermCardInfo>|ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(cardNumber))
ServiceChannel.Return<CES.SL.BillPayment.Contract.IBillPaymentService, List<CES.SL.BillPayment.Contract.BillBeneficiaryInfo>>|ServiceChannel.Return<CES.SL.BillPayment.Contract.IBillPaymentService, List<CES.SL.BillPayment.Contract.BillBeneficiaryInfo>>(service => service.GetBillersForCust(customerIds))
ServiceChannel.Return<IPricingService, CorrespPayoutRateInfo>|ServiceChannel.Return<IPricingService, CorrespPayoutRateInfo>(service => service.GetCorrespPayoutRateInfo(itemId))
ServiceChannel.Return<IPricingService, List<PayoutExchangeRateInfo>>|ServiceChannel.Return<IPricingService, List<PayoutExchangeRateInfo>>(service => service.GetLatestExchangeRates(request))
ServiceChannel.Return<IPricingService, List<CorrespPayoutRateInfo>>|ServiceChannel.Return<IPricingService, List<CorrespPayoutRateInfo>>(service => service.GetCorrespPayoutRateInfos(request, out temp))
ServiceChannel.Return<IOfacService, ValidationResponse>|ServiceChannel.Return<IOfacService, ValidationResponse>(service => service.Match2(ofacUser))
ServiceChannel.Return<IOfacService, WatchlistResponse>|ServiceChannel.Return<IOfacService, WatchlistResponse>(service => service.WatchlistMatch(WatchLustUser, 506, 0, userID))
ServiceChannel.Return<IReportingService, Stream>|
ServiceChannel.Return<IReportingService, List<ReceiptLabelsInfo>>|ServiceChannel.Return<IReportingService, List<ReceiptLabelsInfo>>(service => service.GetReceiptLabels(serviceId, productId, productItemId, languageId))
ServiceChannel.Return<IReportingService, ReceiptTemplateInfo>|ServiceChannel.Return<IReportingService, ReceiptTemplateInfo>(service => service.GetTemplateInfo(request))
ServiceChannel.Return<IReportingService, List<DisclaimerInfo>>|ServiceChannel.Return<IReportingService, List<DisclaimerInfo>>(service => service.GetThermalReceiptDisclaimer(request))
ServiceChannel.Return<IReportingService, CompanyInfo>|ServiceChannel.Return<IReportingService, CompanyInfo>(service => service.GetThermalReceiptCompanyInfo(companyId, companyCountry))
ServiceChannel.Return<IReportingService, int>|ServiceChannel.Return<IReportingService, int>(service => service.GetReceiptLanguageID(language1, language2))
ServiceChannel.Return<IReportingService, GetReceivingAgentCustomerReceiptResponse>|ServiceChannel.Return<IReportingService, GetReceivingAgentCustomerReceiptResponse>(service => service.GetReceivingAgentCustomerReceipt(request))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetPreOrderDisclosureReceipt(request))
ServiceChannel.Return<IReportingService, Stream>|
ServiceChannel.Return<IReportingService, Stream>|
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetPEPReceipt(orderReceiptInfo, SetReportOptions(locale, ReportRenderTypes.PDF)))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetReceivingAgentCustomerReceipt(orderReceiptInfo, SetReportOptions(locale, renderformat), printingType, applicationFEDBId, userId, agentId, agentLocId))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetConsumerReceipt(orderReceiptInfo, SetReportOptions(locale, renderFormat), printingType, applicationFEDBId))
ServiceChannel.Return<IReportingService, Stream>|ServiceChannel.Return<IReportingService, Stream>(service => service.GetOrderOtherReceipt(orderReceiptInfo, SetReportOptions(locale, renderFormat), formType))
ServiceChannel.Return<IReportingService, Stream>|
ServiceChannel.Return<IOfacService, ValidationResponse>|ServiceChannel.Return<IOfacService, ValidationResponse>(service => service.Match2(ofacUserCan))
ServiceChannel.Return<ISarService, SarValidationResponse>|ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate(sarValidationRequest))
ServiceChannel.Return<IAccountingService, decimal>|
ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>|ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>(service => service.GetTransactionSummaryTotalsByAgent(payingAgentId, currency, false, false, DateTime.Today, false))
ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>|ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>(service => service.GetTransactionSummaryTotalsByAgentLocation(payingAgentId, payingAgentLocationId, currency, false, false, DateTime.Today, false))
ServiceChannel.Return<IAccountingService, DepartmentInfo>|ServiceChannel.Return<IAccountingService, DepartmentInfo>(service => service.GetParentDepartment(ContactManager.Get(agentId).DepartmentID)).DepartmentID
ServiceChannel.Return<IImageService, List<ImageInfo>>|ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(customerIdentification.ImageID, false))
ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>|ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(new List<int> { customerId }))
ServiceChannel.Return<IRiaLinkService, TermCardInfo>|ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardId(cardId))
ServiceChannel.Return<IRiaLinkService, TermCardInfo>|ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(cardNumber))
done
