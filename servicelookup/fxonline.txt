Find all "ServiceChannel.Return<", Subfolders, Find Results 1, Entire Solution, "*.cs"
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Controllers\CheckCashing\CheckCashingApiController.cs(680):                var info = ServiceChannel.Return<IPricingService, RateInfo>(service => service.GetRateInfo(rateInfoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Controllers\MoneyTransfer\Receiving\Api\OrderController.cs(686):				sarValidationResponse = ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate2(sarRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Controllers\MoneyTransfer\Receiving\Api\OrderInformationController.cs(584):				var info = ServiceChannel.Return<IPricingService, RateAndFeeInfo>(service => service.GetRatesAndFees(param.rateAndFeeRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Controllers\MoneyTransfer\Receiving\Api\OrderInformationController.cs(600):						var infoForeign = ServiceChannel.Return<IPricingService, RateAndFeeInfo>(service => service.GetRatesAndFees(param.rateAndFeeRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Controllers\MoneyTransfer\Receiving\Api\OrderInformationController.cs(616):							var infoForeign = ServiceChannel.Return<IPricingService, RateAndFeeInfo>(service => service.GetRatesAndFees(param.rateAndFeeRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Controllers\MoneyTransfer\Receiving\Api\OrderInformationController.cs(653):			var termCardInfo = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(riaLinkCardNumber));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Controllers\MoneyTransfer\Receiving\CustomerEnrollment\Api\IdentificationPhotosController.cs(36):			var images = ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(id, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Controllers\MoneyTransfer\Receiving\CustomerEnrollment\Api\IdentificationPhotosController.cs(75):			var image = ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(photoId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Controllers\MoneyTransfer\Receiving\CustomerEnrollment\CustomerEnrollmentController.cs(1341):			//var images = ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(id, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\HttpHandlers\AgentDepositTransactionReceipt.ashx.cs(27):			using (var stream = ServiceChannel.Return<IAccountingService, Stream>(service => service.GetAgentDepositReport(orderId, locale, original)))
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\HttpHandlers\CustomerIDImageHandler.ashx.cs(29):			ImageInfo image = ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(imageId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\HttpHandlers\DocumentsHandler.ashx.cs(22):			DocumentFilesInfo file = ServiceChannel.Return<IDocumentService, DocumentFilesInfo>(service => service.GetDocumentFile(fileId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\HttpHandlers\IDImageHandler.ashx.cs(28):			ImageInfo image = ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(imageId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Models\CustomerSearch\CustomerSearchLoad.cs(344):				var info = ServiceChannel.Return<IPricingService, RateAndFeeInfo>(service => service.GetRatesAndFees(rateAndFeeRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Models\CustomerSearch\CustomerSearchLoad.cs(358):					var infoForeign = ServiceChannel.Return<IPricingService, RateAndFeeInfo>(service => service.GetRatesAndFees(rateAndFeeRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\CanadaStoreOps\SearchStoreOpsCustomerLookup.aspx.cs(466):						riaLinkCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIDs));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\Help\Receiving\DocumentsHome.aspx.cs(31):			var latest = ServiceChannel.Return<IDocumentService, List<DocumentFilesInfo>>(service => service.Get5LatestAgentDocuments(this.Agent.RecAgent.AgentID, true, this.profile.User.Culture.Language));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\Help\Receiving\DocumentsHome.aspx.cs(45):			var languages = ServiceChannel.Return<IDocumentService, List<DocumentLanguageInfo>>(service => service.GetAllDocumentLanguages());
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\Help\Receiving\DocumentsHome.aspx.cs(58):			var categories = ServiceChannel.Return<IDocumentService, List<DocumentCategoryInfo>>(service => service.GetAllDocumentCategories());
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\Help\Receiving\DocumentsHome.aspx.cs(79):			var results = ServiceChannel.Return<IDocumentService, List<DocumentFilesInfo>>(service => 
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\Help\Receiving\DocumentsHome.aspx.cs(111):			var results = ServiceChannel.Return<IDocumentService, List<DocumentFilesInfo>>(service => service.SearchAgentDocumentsWithCategoryLanguage(this.Agent.RecAgent.AgentID, this.titleTextBox.Text, this.categoryDDL.SelectedValue, this.languageBrowseDDL.SelectedValue, false, options));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\MoneyTransfer\Receiving\OfferInfoModal.aspx.cs(21):					ofertType = ServiceChannel.Return<IPricingService, string>(service => service.GetOfferType(Convert.ToInt32(new EncryptionManager().DecryptDecode(Request["ItemID"]))));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\MoneyTransfer\Receiving\OrderEntry\CreateOrderPreferredPayingAgentLocations.aspx.cs(60):					info = ServiceChannel.Return<IPricingService, RateInfo>(service => service.GetRateInfo(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\MoneyTransfer\Receiving\Reports\CustomerHistoryReportModal.aspx.cs(77):				var card = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(riaLinkCardNo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\Payment\PaymentConfirmation.aspx.cs(562):			BeneficiaryTaxResponse benTax = ServiceChannel.Return<IPricingService, BeneficiaryTaxResponse>(service => service.GetBeneficiaryTaxAmount(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\Payment\PaymentConfirmationExtension.cs(69):			var defaultFeeGroupInfo = ServiceChannel.Return<IPricingService, ProgramCommGroupInfo>(service => service.GetDefaultFeeGroupInfo());
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\StoreOps\AgentDepositList.aspx.cs(89):			return ServiceChannel.Return<IAccountingService, List<AgentDepositInfo>>(service => service.GetAgentDepositsByStoreIdAUserId(StoreId,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\StoreOps\AgentDepositList.aspx.cs(105):			int errorid = ServiceChannel.Return<IAccountingService, int>(service => service.SetAgentDepositJEVoid(depositid, this.User.UserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\StoreOps\AgentDeposits.aspx.cs(58):					var createdDepositId = ServiceChannel.Return<IAccountingService, int>(service => service.SetNewAgentDeposit(this.newAgentDepositInfo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\WalmartChile\GatewayWalmartTest.aspx.cs(431):							walmartMessageInfoResult = ServiceChannel.Return<IISO8583WalmartService, WalmartMessageInfo>(service => service.OrderAuthorization(walmartMessageInfo, "TEST from fxonline"));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\WalmartChile\GatewayWalmartTest.aspx.cs(444):							walmartMessageInfoResult = ServiceChannel.Return<IISO8583WalmartService, WalmartMessageInfo>(service => service.PaymentAuthorization(walmartMessageInfo, "TEST from fxonline"));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\WalmartChile\GatewayWalmartTest.aspx.cs(457):							walmartMessageInfoResult = ServiceChannel.Return<IISO8583WalmartService, WalmartMessageInfo>(service => service.RefundAuthorization(walmartMessageInfo, "TEST from fxonline"));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\WalmartChile\GatewayWalmartTest.aspx.cs(481):							walmartMessageInfoResult = ServiceChannel.Return<IISO8583WalmartService, WalmartMessageInfo>(service => service.OrderAuthorizationReverse(walmartMessageInfo, "TEST from fxonline"));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\WalmartChile\GatewayWalmartTest.aspx.cs(495):							walmartMessageInfoResult = ServiceChannel.Return<IISO8583WalmartService, WalmartMessageInfo>(service => service.PaymentAuthorizationReverse(walmartMessageInfo, "TEST from fxonline"));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\WalmartChile\GatewayWalmartTest.aspx.cs(509):							walmartMessageInfoResult = ServiceChannel.Return<IISO8583WalmartService, WalmartMessageInfo>(service => service.RefundAuthorizationReverse(walmartMessageInfo, "TEST from fxonline"));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\WalmartChile\GatewayWalmartTest.aspx.cs(554):				info = ServiceChannel.Return<IISO8583WalmartService, WalmartChileBriefTransactionInfoResponse>(service => service.GetTransactionOrderInfo(orderID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\WalmartChile\GatewayWalmartTest.aspx.cs(573):				info = ServiceChannel.Return<IISO8583WalmartService, WalmartChileBriefTransactionInfoResponse>(service => service.GetTransactionPaidInfo(orderID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Pages\WalmartChile\GatewayWalmartTest.aspx.cs(592):				info = ServiceChannel.Return<IISO8583WalmartService, WalmartChileBriefTransactionInfoResponse>(service => service.GetTransactionRefundedInfo(orderID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Services\CheckCashing.asmx.cs(896):				var info = ServiceChannel.Return<IPricingService, RateInfo>(service => service.GetRateInfo(rateInfoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Services\ScriptMethods.asmx.cs(638):			FeeInfo info = ServiceChannel.Return<IPricingService, FeeInfo>(service => service.Get(feeInfoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Services\ScriptMethods.asmx.cs(708):			FeeInfo info = ServiceChannel.Return<IPricingService, FeeInfo>(service => service.Get(feeInfoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Services\ScriptMethods.asmx.cs(777):			var info = ServiceChannel.Return<IPricingService, FeeInfo>(service => service.GetLowestByCountry(feeInfoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Services\ScriptMethods.asmx.cs(872):				ARBalanceCheckInfo info = ServiceChannel.Return<IAccountingService, ARBalanceCheckInfo>(service => service.CheckARBalance(this.Agent.Contact.NameID));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline\Services\ScriptMethods.asmx.cs(948):			return ServiceChannel.Return<CES.SL.BillPayment.Contract.IBillPaymentService, List<CES.SL.BillPayment.Contract.BillerLocationInfo>>(service =>
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Accounting\AccountsReceivableManager.cs(23):			return ServiceChannel.Return<IAccountingService, List<ARDepositAccount>>(service => service.GetDepositAccounts(countryId, groupId, agentId, locale));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Accounting\PayAgentCommissionManager.cs(12):			return ServiceChannel.Return<IAccountingService, List<PayAgentCommissionInfo>>(service => service.GetDocPayAgentComissionGetByNameID(nameId, dateFrom));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Accounting\PayAgentCommissionManager.cs(17):			return ServiceChannel.Return<IAccountingService, PayAgentCommissionDataInfo>(service => service.GetDocPayAgentComissionData(documentId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\BillPayment\BillPaymentManager.cs(24):			return ServiceChannel.Return<IBillPaymentService, List<BillBeneficiaryInfo>>(service => service.GetBillerDetails(customerId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\BillPayment\BillPaymentManager.cs(35):			return ServiceChannel.Return<IBillPaymentService, int>(service => service.UpdateBillerTerminalDetails(info, customerId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\BillPayment\BillPaymentManager.cs(41):			return ServiceChannel.Return<IBillPaymentService, int>(service => service.GetAgentCityID(agentCountry, agentPostalCode));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\BillPayment\CustomerManager.cs(20):			int lCustomerNo = ServiceChannel.Return<IBillPaymentService, int>(service => service.CheckCustomerNo(lTempNo, sCustomerNo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Cache\CacheStorage.cs(444):			var cacheItem = this.lookup.GetItem(cacheKey, () => ServiceChannel.Return<IPricingService, List<AgentProgramInfo>>(service => service.GetAllProgramsForAgent(agentId)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Cache\CacheStorage.cs(452):			var cacheItem = this.lookup.GetItem(cacheKey, () => ServiceChannel.Return<IPricingService, List<AgentProgramInfo>>(service => service.GetAllProgramsByAgentCurrency(agentId, currency)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Cache\CacheStorage.cs(517):			var cacheItem = this.lookup.GetItem(cacheKey, () => ServiceChannel.Return<IOfacService, ValidationResponse>(service => service.Match2(new OfacUserInfo()
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Cache\LongTermCacheStorage.cs(115):			return this.lookup.GetItem($"GetAllPayoutCurrenciesByCountry{country}", () => ServiceChannel.Return<IPricingService, List<string>>(service => service.GetPayoutCurrencyListByCountry(country)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Cache\LongTermCacheStorage.cs(188):				return ServiceChannel.Return<IBillPaymentService, List<BillerLocationInfo>>(service => service.GetBillerLookUpList(billerName, country, baseCurrency, agentCountry, agentid));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\CheckCashing\CheckCashingReceiptManager.cs(139):				receiptDataStream = ServiceChannel.Return<IReportingService, Stream>(service => service.GetCheckCashingReceiptInfo(checkcashReceiptInfo, SetReportOptions(locale, CES.Common.Bll.Types.ReportRenderTypes.PDF), printingType));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(11):			return ServiceChannel.Return<ISarService, int>(service => service.AddComplianceIssue(orderId, userNameId, message, note, onHoldReason, onHold ? 1 : 0, serviceTypeId, issueTypeId, issueItemId, 0, allowToCreateDuplicateIssue));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\Logging\ComplianceLogEntryManager.cs(16):			return ServiceChannel.Return<ISarService, int>(service => service.CheckIssueStatus(orderId, issueTypeId, issueItemId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(18):			var ofacListList = ServiceChannel.Return<IOfacService, List<OFACListInfo>>(service => service.GetAllBlackLists(agentId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(29):			var ofacListHistoryInfoList = ServiceChannel.Return<IOfacService, List<OFACListHistoryInfo>>(service => service.GetListHistory(listId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(42):			var ofacAliasInfoList = ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>(service => service.GetAllAliases(blackListInfo.ListID, entryId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(54):			var ofacEntry = ServiceChannel.Return<IOfacService, OFACEntryInfo>(service => service.GetEntryInfo(blackListInfo.ListID, entryId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(66):			var ofacEntry = ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetAllNamesByCsv(blackListInfo.ListID, entryId.ToString()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(78):			var ofacList = ServiceChannel.Return<IOfacService, OFACListInfo>(service => service.GetBlackList(listId, agentId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(91):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetNameList(blackListInfo.ListID, filter));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(97):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetAllNamesByCsv(blackListInfo.ListID, OfACNameIDs.ToCsv()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(103):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>(service => service.GetAllAliasesByCSV(blackListInfo.ListID, OfACNameIDs.ToCsv()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(130):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACNameCombinedInfo>>(service => service.GetNameCombinedList(blackListInfo.ListID, filter));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(143):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACAliasInfo>>(service => service.GetAliasList(blackListInfo.ListID, filter));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(159):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACAddressInfo>>(service => service.GetAddressList(blackListInfo.ListID, filter));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\OFAC\OFACBlackListManager.cs(168):			var ofacList = ServiceChannel.Return<IOfacService, List<OFACNameInfo>>(service => service.GetAllNamesByCsv(listId, ent_nums.ToCsv()));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\SAR\SARValidationManager.cs(127):			var sar = ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate(sarValidationRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Compliance\SAR\SARValidationManager.cs(157):			return ServiceChannel.Return<IPricingService, RateInfo>(service => service.GetRateInfo(rateInfoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\CorporateFxPayment\CorporateFxReceiptManager.cs(20):		//    Stream stream = ServiceChannel.Return<IReportingService, Stream>(service => service.GetCorporateFxReceipts(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\CorporateFxPayment\CorporateFxReceiptManager.cs(30):		//    Stream stream = ServiceChannel.Return<IReportingService, Stream>(service => service.GetCorporateFxReceipts(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\CorporateFxPayment\CorporateFxReceiptManager.cs(38):			Stream stream = ServiceChannel.Return<IReportingService, Stream>(service => service.GetCorporateFxReceipts(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\CustomerEnrollment\Providers\CustomerIdentificationFacade.cs(166):			//ImageIDInfo imageIdInfo = ServiceChannel.Return<IImageService, ImageIDInfo>(service => service.CreateCustomerIdentificationImageV2(identificationImageInfo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Customers\CustomerIDImageManager.cs(39):			ImageIDInfo imageIdInfo = ServiceChannel.Return<IImageService, ImageIDInfo>(service => service.CreateCustomerIdentificationImageV2(identificationImageInfo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Customers\CustomerIDImageManager.cs(57):			return ServiceChannel.Return<IImageService, ImageInfo>(service => service.GetImage(id));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Customers\CustomerIDImageManager.cs(81):			return ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(imageId, includeImage));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(18):				walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.OrderRequest(orderid, modifyUserId, loginID, ""));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(33):				walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.PaymentRequest(orderid, modifyUserId, loginID, ""));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(49):				walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.RefundRequest(orderid, modifyUserId, loginID, ""));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(66):				walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.OrderAuthorizationReverseByOrderId(orderid, modifyUserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(90):				walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.PaymentAuthorizationReverseByOrderId(orderid, modifyUserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(114):				walmartRequestResult = ServiceChannel.Return<IISO8583WalmartService, WalmartRequestResult>(service => service.RefundAuthorizationReverseByOrderId(orderid, modifyUserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(139):			return ServiceChannel.Return<IISO8583WalmartService, List<GatewayWalmartChileLogInfo>>(service => service.GetLogByOrderId(orderid));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(144):			return ServiceChannel.Return<IISO8583WalmartService, List<GatewayWalmartChileLogInfo>>(service => service.GetLogByOrderNo(orderNo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\GatewayWalmartChile\GatewayWalmartChileManager.cs(156):				gatewayWalmartChileLogSearch = ServiceChannel.Return<IISO8583WalmartService, GatewayWalmartChileLogSearch>(service => service.SearchLog(searchOptions.DateFrom, searchOptions.DateTo,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Model\CrossSelling\CrossSellManager.cs(24):				var bannerResponse = ServiceChannel.Return<ICrossSellingService, GetBannersResponse>(service => service.GetBanners(dtoRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Model\OrderCreate\BankDeposit\BankDepositPricingInfo.cs(91):			var rateAndFeeInfo = ServiceChannel.Return<IPricingService, RateAndFeeInfo>(service => service.GetRatesAndFees(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Model\OrderCreate\SAR.cs(81):				result.SarValidationResponse = ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate2(sarRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Orders\AmountRecalculation.cs(182):			var correspBuyRate = ServiceChannel.Return<IPricingService, CorrespBaseRatesSavedInfo>(service => service.GetItemForGivenDate(itemId, transDate));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Orders\AmountRecalculation.cs(189):			var correspBaseRate = ServiceChannel.Return<IPricingService, CorrespBaseRatesInfo>(service => service.GetCorrespAndCurTo(correspondentId, currencyTo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\IdentificationCheckManager.cs(78):			var info = ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(imageId, includeImages));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\OrderEntry\CreateManualOrderFormManager.cs(50):			return ServiceChannel.Return<IDocumentService, List<DocumentFilesInfo>>(service => service.SearchDocumentsByFileNameMatch(fileNameMatch, ommitImageData));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(53):				var card = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(riaLinkCardNo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(104):				riaLinkCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIds));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(150):				var card = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(riaLinkCardNo));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\OrderEntry\CustomerBeneficiarySearchManager.cs(224):				riaLinkCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customerIDs));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\PossibleDuplicateActionManager.cs(14):			ComplianceInfo info = ServiceChannel.Return<ISarService, ComplianceInfo>(service => service.GetComplianceMatchById(id));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\Receipts\OrderReceiptManager.cs(67):			List<ComplianceFormInfo> templateExists = ServiceChannel.Return<IReportingService, List<ComplianceFormInfo>>(service => service.SSRSComplianceTemplateList(orderId, userLoginLocale, receiptPrintingType,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\Reports\CommissionReportManager.cs(15):			var transactions = ServiceChannel.Return<IAccountingService, List<ReceivingAgentTransactionCommission>>(service => service.GetAgentCommission(agentId, agentLocationIdCSV, "", transactionType, beginDate, endDate, 0));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\Reports\CurrentBalanceManager.cs(15):			var transactions = ServiceChannel.Return<IAccountingService, List<TransactionInfo>>(service => service.GetTransactionDetailsByJEID(jeId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\Reports\CurrentBalanceManager.cs(87):			var exists = ServiceChannel.Return<IAccountingService, PeriodBalance1Info>(service => service.GetPeriodPrecedingDate(filterDate));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\Reports\CurrentBalanceManager.cs(93):			var journalEntry1Info = ServiceChannel.Return<IAccountingService, JournalEntry1Info>(service => service.GetAgentLastDeposit(agentId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\Reports\CurrentBalanceManager.cs(99):			var transactions = ServiceChannel.Return<IAccountingService, List<TransactionInfo>>(service => service.GetTransactionsByDateAndAgent(fromDate, toDate, agentId, true));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\Reports\CurrentBalanceManager.cs(110):			var balance = ServiceChannel.Return<IAccountingService, List<AgentOutstandingBalanceInfo>>(service => service.GetAgentOutstandingBalance(agentId, weekdays, today));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\RiaLink\BillerTabManager.cs(30):			var billerInfo2 = ServiceChannel.Return<IBillPaymentService, BillBeneficiaryInfo>(service => service.InsertBiller(billerInfo, modifiedUserId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\RiaLink\BillerTabManager.cs(112):			var infos = ServiceChannel.Return<IBillPaymentService, List<BillBeneficiaryInfo>>(service => service.GetBillerDetails(customerId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\RiaLink\BillerTabManager.cs(118):			var billerInfo = ServiceChannel.Return<IBillPaymentService, BillBeneficiaryInfo>(service => service.GetBiller(customerAccountId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\RiaLink\CustomerDetailTabManager.cs(35):			return ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(new List<int> { customerId }));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\RiaLink\CustomerSearchManager.cs(78):			termCardInfo = ServiceChannel.Return<IRiaLinkService, TermCardInventoryInfo>(service => service.GetTermCardByProcessorCardId(processorCardId, processor));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\RiaLink\CustomerSearchManager.cs(93):			List<TermCardInfo> cards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(customers.ConvertAll(c => c.CustomerID)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\RiaLink\CustomerSearchManager.cs(106):			var termCard = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumberAndDoB(FxOnlineConfig.Instance.ApplicationId, 0, this.agent.UserId, param.CardNumber, param.CustomerDoB, agentCountryAbbrev));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\RiaLink\CustomerSearchManager.cs(172):			TermCardInfo termCardInfo = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(cardNumber));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\MoneyTransfer\Receiving\RiaLink\CustomerSearchManager.cs(215):			return ServiceChannel.Return<CES.SL.BillPayment.Contract.IBillPaymentService, List<CES.SL.BillPayment.Contract.BillBeneficiaryInfo>>(service => service.GetBillersForCust(customerIds));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Payment\PayoutExchangeRateManager.cs(34):			return ServiceChannel.Return<IPricingService, CorrespPayoutRateInfo>(service => service.GetCorrespPayoutRateInfo(itemId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Payment\PayoutExchangeRateManager.cs(39):			return ServiceChannel.Return<IPricingService, List<PayoutExchangeRateInfo>>(service => service.GetLatestExchangeRates(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Bll\Payment\PayoutExchangeRateManager.cs(45):			var infos = ServiceChannel.Return<IPricingService, List<CorrespPayoutRateInfo>>(service => service.GetCorrespPayoutRateInfos(request, out temp));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Agents\Providers\Finance\LimitValidationManager.cs(344):				var agentUsdTotalToday = ServiceChannel.Return<IAccountingService, decimal>(service => service.GetTransactionSummaryTotalsByAgent(receivingAgentInfo.AgentID,
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Agents\Providers\Finance\LimitValidationManager.cs(412):			var info = ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>(service => service.GetTransactionSummaryTotalsByAgent(payingAgentId, currency, false, false, DateTime.Today, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Agents\Providers\Finance\LimitValidationManager.cs(425):			var info = ServiceChannel.Return<IAccountingService, TransactionSummaryTotalInfo>(service => service.GetTransactionSummaryTotalsByAgentLocation(payingAgentId, payingAgentLocationId, currency, false, false, DateTime.Today, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Agents\Providers\Finance\LimitValidationManager.cs(440):			int parentDepartment = ServiceChannel.Return<IAccountingService, DepartmentInfo>(service => service.GetParentDepartment(ContactManager.Get(agentId).DepartmentID)).DepartmentID;
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Customers\Providers\CustomerIDManager.cs(197):			var images = ServiceChannel.Return<IImageService, List<ImageInfo>>(service => service.GetImages(customerIdentification.ImageID, false));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Customers\Providers\CustomerRiaLinkManager.cs(49):			List<TermCardInfo> termCards = ServiceChannel.Return<IRiaLinkService, List<TermCardInfo>>(service => service.GetTermCardByCustomerIds(new List<int> { customerId }));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Customers\Providers\CustomerRiaLinkManager.cs(55):			return ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardId(cardId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Customers\Providers\CustomerRiaLinkManager.cs(60):			return ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(cardNumber));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Orders\Providers\Reports\CustomerReceiptManager.cs(65):			return ServiceChannel.Return<IReportingService, SSRSOrderReceiptResponse>(service => service.GetRecevingAgentReceiptResponse(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Orders\Providers\Reports\CustomerReceiptManager.cs(87):				return ServiceChannel.Return<IReportingService, GetReceivingAgentCustomerReceiptResponse>(service => service.GetReceivingAgentCustomerReceipt(request, useSSRSStream));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Orders\Providers\Reports\CustomerReceiptManager.cs(95):			return ServiceChannel.Return<IReportingService, Stream>(service => service.GetPreOrderDisclosureReceipt(request));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Orders\Providers\Reports\CustomerReceiptManager.cs(132):				receiptDataStream = ServiceChannel.Return<IReportingService, Stream>(service => service.GetReceivingAgentCustomerReceipt(orderReceiptInfo, SetReportOptions(locale, renderFormat),
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Orders\Providers\Reports\CustomerReceiptManager.cs(164):				receiptDataStream = ServiceChannel.Return<IReportingService, Stream>(service =>
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Orders\Providers\Reports\CustomerReceiptManager.cs(225):			return ServiceChannel.Return<IReportingService, Stream>(service => service.GetPEPReceipt(orderReceiptInfo, SetReportOptions(locale, ReportRenderTypes.PDF)));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Orders\Providers\Reports\CustomerReceiptManager.cs(906):			return ServiceChannel.Return<IReportingService, Stream>(service => service.GetReceivingAgentCustomerReceipt(orderReceiptInfo, SetReportOptions(locale, renderformat), printingType, applicationFEDBId, userId, agentId, agentLocId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Orders\Providers\Reports\CustomerReceiptManager.cs(911):			return ServiceChannel.Return<IReportingService, Stream>(service => service.GetConsumerReceipt(orderReceiptInfo, SetReportOptions(locale, renderFormat), printingType, applicationFEDBId));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Orders\Providers\Reports\CustomerReceiptManager.cs(916):			return ServiceChannel.Return<IReportingService, Stream>(service => service.GetOrderOtherReceipt(orderReceiptInfo, SetReportOptions(locale, renderFormat), formType));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\FxOnline.Orders\Providers\Validation\SarValidator.cs(127):			var sarValidationResponse = ServiceChannel.Return<ISarService, SarValidationResponse>(service => service.Validate(sarValidationRequest));
  C:\Users\nhussein\Source\Repos\FxOnline\Web\Classic\MoneyTransfer.Infrastructure\OrderCreate\RiaLink\CustomerCardRepository.cs(11):			var termCardInfo = ServiceChannel.Return<IRiaLinkService, TermCardInfo>(service => service.GetTermCardByCardNumber(cardNumber));
  Matching lines: 140    Matching files: 57    Total files searched: 2674
